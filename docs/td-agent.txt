# Overview of Streaming Import by Treasure Agent (td-agent)

This article will explain how to continuously import data using the `td-agent` daemon.

## Prerequisites

  * Basic knowledge of Treasure Data. The [Quickstart Guide](quickstart) is a good place to start.

## Logs Are Streams, Not Files

Logs are usually rotated on an hourly or daily basis based on time or size. This system quickly produces many large log files that need to be batch imported for further analysis. This is an outdated approach. Logs are better treated as continuously generated *STREAMS* as opposed to files.

NOTE: "Server daemons (such as PostgreSQL or Nginx) and applications (such as a Rails or Django app) sometimes offer a configuration parameter for a path to the programâ€™s logfile. This can lead us to think of logs as files. But a better conceptual model is to treat logs as time-ordered streams..." - <a href="http://adam.heroku.com/past/2011/4/1/logs_are_streams_not_files/">Logs Are Streams, Not Files</a> Adam Wiggins, Heroku co-founder.

`td-agent`, a data collection daemon, is used to import data continuously to Treasure Data. Although bulk-import is supported, we recommend importing your data continuously via `td-agent`.

## What is Treasure Agent?

td-agent is a data collection daemon. It collects logs from various data sources and uploads them to Treasure Data.

<center><img src="/images/td-agent.png" width="90%"></center>

## How to install Treasure Agent?

This video demonstrates how to install td-agent in 3 minutes.

<center><iframe width="480" height="345" src="//www.youtube-nocookie.com/embed/aepa66ykguc?rel=0&theme=light&modestbranding=1&showinfo=0" frameborder="1" allowfullscreen></iframe></center><br/>

To install Treasure Agent (`td-agent`), please execute one of the command below based on your environment. The agent program will be installed automatically by using the package management software for each platform like rpm/deb/dmg.

#### MacOS X 10.9+

    :::terminal
    $ open 'http://packages.treasuredata.com/2/macosx/td-agent-2.1.4-0.dmg'

#### RHEL/CentOS 5,6,7

    :::terminal
    $ curl -L http://toolbelt.treasuredata.com/sh/install-redhat-td-agent2.sh | sh

#### Ubuntu & Debian

    :::terminal
    # 14.04 Trusty (64bit only)
    $ curl -L http://toolbelt.treasuredata.com/sh/install-ubuntu-trusty-td-agent2.sh | sh
    # 12.04 Precise
    $ curl -L http://toolbelt.treasuredata.com/sh/install-ubuntu-precise-td-agent2.sh | sh
    # 10.04 Lucid
    $ curl -L http://toolbelt.treasuredata.com/sh/install-ubuntu-lucid-td-agent2.sh | sh

    # Debian Jessie (64-bit only)
    $ curl -L https://td-toolbelt.herokuapp.com/sh/install-debian-jessie-td-agent2.sh | sh
    # Debian Squeeze (64-bit only)
    $ curl -L http://toolbelt.treasuredata.com/sh/install-debian-squeeze-td-agent2.sh | sh
    # Debian Wheezy (64-bit only)
    $ curl -L http://toolbelt.treasuredata.com/sh/install-debian-wheezy-td-agent2.sh | sh

#### Amazon Linux

    :::terminal
    $ curl -L http://toolbelt.treasuredata.com/sh/install-redhat-td-agent2.sh | sh

#### Opscode Chef (<a target="_blank" href="https://github.com/treasure-data/chef-td-agent">repository</a>)

    :::terminal
    $ echo 'cookbook "td-agent"' >> Berksfile
    $ berks install

<a href="https://github.com/treasure-data/elastic-beanstalk-td-agent">AWS Elastic Beanstalk</a> is also supported. Amazon Linux & Windows are currently NOT supported.

## Set up td-agent

After installing `td-agent`, you can modify your config file. The file can be found in /etc/td-agent/td-agent.conf.

The config file comes with some sample settings. You will find the following lines in your config. Please specify your API key by setting the `apikey` option. You can view your api key from the [console](<%= @env[:url_profile] %>).

    :::text
    # HTTP input
    <source>
      type http
      port 8888
    </source>

    # Treasure Data output
    <match td.*.*>
      type tdlog
      endpoint <%= @env[:api_endpoint] %>
      apikey YOUR_API_KEY
      auto_create_table
      buffer_type file
      buffer_path /var/log/td-agent/buffer/td
      use_ssl true
    </match>

NOTE: <i>YOUR_API_KEY</i> should be your actual apikey string. You can retrieve your api key from <a href="<%= @env[:url_profile] %>" target="_blank">HERE</a>. Using the [write-only key](access-control#rest-apis-access) is recommended.

Now please restart the td-agent service.

    :::terminal
    # Linux
    $ sudo /etc/init.d/td-agent restart

    # MacOS X
    $ sudo launchctl unload /Library/LaunchDaemons/td-agent.plist
    $ sudo launchctl load /Library/LaunchDaemons/td-agent.plist

## Confirm Data Upload

You can add logs in JSON format using HTTP.

    :::terminal
    $ curl -X POST -d 'json={"action":"login","user":2}' \
      http://localhost:8888/td.testdb.www_access

`td-agent` continuously uploads logs every 5 minutes. You can force `td-agent` to flush the buffered logs into the cloud by sending a SIGUSR1 signal.

    :::terminal
    # Linux
    $ kill -USR1 `cat /var/run/td-agent/td-agent.pid`

    # MacOS X
    $ sudo kill -USR1 `sudo launchctl list | grep td-agent | cut -f 1`

Finally, please visit the [Databases](<%= @env[:url_databases] %>) page at Web console, to check if the data got imported successfully. From CLI, you can check by issuing the `td tables` command:

    :::terminal
    $ td tables
    +------------+------------+------+-----------+
    | Database   | Table      | Type | Count     |
    +------------+------------+------+-----------+
    | testdb     | www_access | log  | 1         |
    +------------+------------+------+-----------+

If you run into any issues, the `td-agent` log (/var/log/td-agent.log) is a good place to start your investigation.

## Files Installed by the Packages

The files shown below are installed by the rpm or debian packages.

<table>
  <tr>
    <th>Resource</th>
    <th>Location</th>
    <th>Notes</th>
  </tr>
  <tr>
    <td>Config Directory</td>
    <td>/etc/td-agent/</td>
    <td></td>
  </tr>
  <tr>
    <td>Config File</td>
    <td>/etc/td-agent/td-agent.conf</td>
    <td>This config will be picked-up by the startup script</td>
  </tr>
  <tr>
    <td>Startup Script</td>
    <td>/etc/init.d/td-agent</td>
    <td></td>
  </tr>
  <tr>
    <td>Log Directory</td>
    <td>/var/log/td-agent/</td>
    <td></td>
  </tr>
  <tr>
    <td>Plugin Directory</td>
    <td>/etc/td-agent/plugin/</td>
    <td>Your custom plugins go here.</td>
  </tr>
  <tr>
    <td>Ruby Interpreter</td>
    <td>/opt/td-agent/embedded/bin/ruby</td>
    <td>Ruby v2.1 is bundled with the package.</td>
  </tr>
  <tr>
    <td>Rubygems</td>
    <td>/usr/sbin/td-agent-gem</td>
    <td>Bundled rubygems to install fluentd plugins. For example: `/usr/sbin/td-agent-gem install fluent-plugin-mongo`
  </tr>
  <tr>
    <td>jemalloc</td>
    <td>/opt/td-agent/embedded/lib/libjemalloc.so</td>
    <td><a href="http://www.canonware.com/jemalloc/">jemalloc</a> is bundled together to avoid memory fragmentation. It is loaded by default in the startup script.</td>
  </tr>
</table>

## Debugging

If you are having issues, please add the following line to `/etc/default/td-agent` to enable verbose logging:

    :::text
    DAEMON_ARGS=-vv

After that, please restart the daemon. You can now find more verbose logs in /var/log/td-agent.log

## What's Next?

Next, modify your existing applications to post data to Treasure Data. The articles below explain the process (with sample code) for various languages, frameworks, and middleware.

#### Languages and Frameworks
<table>
  <tr>
    <th colspan="3">Supported Languages</th>
    <tr>
      <td style="text-align: left; width: 33%;"><a href="ruby">Ruby</a> or <a href="rails">Rails</a></td>
      <td style="text-align: left;"><a href="java">Java</a></td>
      <td style="text-align: left;"><a href="perl">Perl</a></td>
    </tr>
    <tr>
      <td style="text-align: left; width: 33%;"><a href="python">Python</a></td>
      <td style="text-align: left;"><a href="php">PHP</a></td>
      <td style="text-align: left;"><a href="scala">Scala</a></td>
    </tr>
    <tr>
      <td style="text-align: left;"><a href="nodejs">Node.js</a></td>
    </tr>
  </tr>
</table>

#### Middleware
* [Apache Logs](analyzing-apache-logs)
* [Tailing Existing CSV or TSV Logs](td-agent-tail-ctltsv)

#### High-Availability Configurations and Monitoring

For high-traffic websites, we recommend using a high availability configuration for td-agent. Monitoring the daemon is also important.

  * [High-Availability Configurations with td-agent](td-agent-high-availability)
  * [Monitoring td-agent](td-agent-monitoring)

NOTE: td-agent is fully open-sourced under the <a href="http://fluentd.org/">fluentd project</a>.
