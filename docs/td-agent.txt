# Continuous Data Import with td-agent

This article will explain how to continuously import data using the `td-agent` daemon.

## Prerequisites

  * Basic knowledge of Treasure Data. The [Quickstart Guide](quickstart) is a good place to start.

## Logs Are Streams, Not Files

Logs are usually rotated on an hourly or daily basis based on time or size. This system quickly produces many large log files that need to be batch imported for further analysis. This is an outdated approach. Logs are better treated as continuously generated *STREAMS* as opposed to files.

NOTE: "Server daemons (such as PostgreSQL or Nginx) and applications (such as a Rails or Django app) sometimes offer a configuration parameter for a path to the programâ€™s logfile. This can lead us to think of logs as files. But a better conceptual model is to treat logs as time-ordered streams..." - <a href="http://adam.heroku.com/past/2011/4/1/logs_are_streams_not_files/">Logs Are Streams, Not Files</a> Adam Wiggins, Heroku co-founder.

`td-agent`, a data collection daemon, is used to import data continuously to Treasure Data. Although bulk-import is supported, we recommend importing your data continuously via `td-agent`.

## About td-agent

td-agent is a data collection daemon. It collects logs from various data sources and uploads them to Treasure Data.

<center><img src="/images/td-agent.png" width="90%"></center>

NOTE: `td-agent` is fully open-sourced as <a href="http://fluentd.org/">the fluentd project</a>. `td-agent` is a package that contains fluentd along with some plugins for Treasure Data. You can learn more about the differences between `td-agent` and `fluentd` <a href="http://community.fluentd.org/a/what-is-the-difference-with-td-agent-and-fluentd/">here</a>.

## Install td-agent

Please consult the following articles to set up `td-agent`.

<table>
  <tr>
    <th>If you have...</th>
    <th>Please look at...</th>
  </tr>
  <tr>
    <td>Debian / Ubuntu System</td>
    <td><a href="http://treasure-data.tenderapp.com/kb/installing-td-agent-daemon/installing-td-agent-for-debian-and-ubuntu">Installing td-agent for Debian and Ubuntu</a></td>
  </tr>
  <tr>
    <td>Redhat / CentOS System</td>
    <td><a href="http://treasure-data.tenderapp.com/kb/installing-td-agent-daemon/installing-td-agent-for-redhat-and-centos">Installing td-agent for Redhat and CentOS</a></td>
  </tr>
  <tr>
    <td>Joyent SmartOS</td>
    <td><a href="http://help.treasure-data.com/kb/frequently-asked-questions/installing-fluentd-td-plugin-on-joyent-smartos">Installing fluentd + td plugin on Joyent SmartOS</a></td>
  </tr>
</table>

## Set up td-agent

After installing `td-agent`, you can modify your config file. The file can be found in /etc/td-agent/td-agent.conf.

The config file comes with some sample settings. You will find the following lines in your config.

    :::text
    # HTTP input
    <source>
      type http
      port 8888
    </source>
    
    # Treasure Data output
    <match td.*.*>
      type tdlog
      apikey ...
      auto_create_table
      buffer_type file
      buffer_path /var/log/td-agent/buffer/td
      use_ssl true
    </match>

You will need to set the `apikey` option, which is a secret key to authenticate your account. You can get your apikey by issuing the `td apikey:show` command.

    :::term
    $ td apikey:show
    1be3de7d01be3de7d01be3de7d01be3de7d01be3

Now restart the td-agent service.

    :::term
    $ /etc/init.d/td-agent restart

### Confirm Data Upload

You can add logs in JSON format using HTTP.

    :::term
    $ curl -X POST -d 'json={"action":"login","user":2}' \
      http://localhost:8888/td.testdb.www_access

`td-agent` continuously uploads logs every 5 minutes. You can force `td-agent` to flush the buffered logs into the cloud by sending a SIGUSR1 signal.

    :::term
    $ kill -USR1 `cat /var/run/td-agent/td-agent.pid`

You can confirm that your data was imported successfully by issuing the `td tables` command:

    :::term
    $ td tables
    +------------+------------+------+-----------+
    | Database   | Table      | Type | Count     |
    +------------+------------+------+-----------+
    | testdb     | www_access | log  | 1         |
    +------------+------------+------+-----------+

If you run into any issues, your log (/var/log/td-agent.log) is a good place to start your investigation.

## Files Installed by the Packages

The files shown below are installed by the rpm or debian packages.

<table>
  <tr>
    <th>Resource</th>
    <th>Location</th>
    <th>Notes</th>
  </tr>
  <tr>
    <td>Config Directory</td>
    <td>/etc/td-agent/</td>
    <td></td>
  </tr>
  <tr>
    <td>Config File</td>
    <td>/etc/td-agent/td-agent.conf</td>
    <td>This config will be picked-up by the startup script</td>
  </tr>
  <tr>
    <td>Startup Script</td>
    <td>/etc/init.d/td-agent</td>
    <td></td>
  </tr>
  <tr>
    <td>Log Directory</td>
    <td>/var/log/td-agent/</td>
    <td></td>
  </tr>
  <tr>
    <td>Plugin Directory</td>
    <td>/etc/td-agent/plugin/</td>
    <td>Your custom plugins go here.</td>
  </tr>
  <tr>
    <td>Ruby Interpreter</td>
    <td>/usr/lib{64}/fluent/ruby/bin/ruby</td>
    <td>Ruby v1.9 is bundled with the package.</td>
  </tr>
  <tr>
    <td>Rubygems</td>
    <td>/usr/lib{64}/fluent/ruby/bin/fluent-gem</td>
    <td>Bundled rubygems to install fluentd plugins. For example: `/usr/lib64/fluent/ruby/bin/fluent-gem install fluent-plugin-mongo`
  </tr>
  <tr>
    <td>jemalloc</td>
    <td>/usr/lib{64}/fluent/jemalloc/lib/libjemalloc.so</td>
    <td><a href="http://www.canonware.com/jemalloc/">jemalloc</a> is bundled together to avoid memory fragmentation. It is loaded by default in the startup script.</td>
  </tr>
</table>

## What's Next?

Next, modify your existing applications to post data to Treasure Data. The articles below explain the process (with sample code) for various languages, frameworks, and middleware.

#### Languages and Frameworks
<table>
  <tr>
    <th colspan="3">Supported Languages</th>
    <tr>
      <td style="text-align: left; width: 33%;"><a href="ruby">Ruby</a> or <a href="rails">Rails</a></td>
      <td style="text-align: left;"><a href="java">Java</a></td>
      <td style="text-align: left;"><a href="php">Perl</a></td>
    </tr>
    <tr>
      <td style="text-align: left; width: 33%;"><a href="python">Python</a></td>
      <td style="text-align: left;"><a href="php">PHP</a></td>
      <td style="text-align: left;"><a href="scala">Scala</a></td>
    </tr>
    <tr>
      <td style="text-align: left;"><a href="nodejs">Node.js</a></td>
    </tr>
  </tr>
</table>

#### Middleware
* [Apache Logs](analyzing-apache-logs)
* [Tailing Existing CSV or TSV Logs](td-agent-tail)

#### High-Availability Configurations and Monitoring

For high-traffic websites, we recommend using a high availability configuration for td-agent. Monitoring the daemon is also important.

  * [High-Availability Configurations with td-agent](td-agent-high-availability)
  * [Monitoring td-agent](td-agent-monitoring)
