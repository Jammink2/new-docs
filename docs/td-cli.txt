<!--
This page is auto generated by generate_td_command_docs.rb
-->
# td command line tool reference

This page documents most of `td` subcommands.


## td db:list

###usage:


    $ td db:list
  
###example:


    $ td db:list
    $ td dbs
  
###description:


    Show list of tables in a database
  
###options:


    -f, --format FORMAT              format of the result rendering (tsv, csv, json or table. default is table)


## td db:show

###usage:


    $ td db:show <db>
  
###example:


    $ td db example_db
  
###description:


    Describe information of a database
  
###options:


    -f, --format FORMAT              format of the result rendering (tsv, csv, json or table. default is table)


## td db:create

###usage:


    $ td db:create <db>
  
###example:


    $ td db:create example_db
  
###description:


    Create a database


## td db:delete

###usage:


    $ td db:delete <db>
  
###example:


    $ td db:delete example_db
  
###description:


    Delete a database
  
###options:


    -f, --force                      clear tables and delete the database


## td table:list

###usage:


    $ td table:list [db]
  
###example:


    $ td table:list
    $ td table:list example_db
    $ td tables
  
###description:


    Show list of tables
  
###options:


    -n, --num_threads VAL            number of threads to get list in parallel
        --show-bytes                 show estimated table size in bytes
    -f, --format FORMAT              format of the result rendering (tsv, csv, json or table. default is table)


## td table:show

###usage:


    $ td table:show <db> <table>
  
###example:


    $ td table example_db table1
  
###description:


    Describe information of a table


## td table:create

###usage:


    $ td table:create <db> <table>
  
###example:


    $ td table:create example_db table1
  
###description:


    Create a table
  
###options:


    -T, --type TYPE                  set table type (log or item)
        --primary-key PRIMARY_KEY_AND_TYPE
                                     [primary key]:[primary key type]


## td table:delete

###usage:


    $ td table:delete <db> <table>
  
###example:


    $ td table:delete example_db table1
  
###description:


    Delete a table
  
###options:


    -f, --force                      never prompt


## td table:import

###usage:


    $ td table:import <db> <table> <files...>
  
###example:


    $ td table:import example_db table1 --apache access.log
    $ td table:import example_db table1 --json -t time - < test.json
  
###description:


    Parse and import files to a table
  
###options:


        --format FORMAT              file format (default: apache)
        --apache                     same as --format apache; apache common log format
        --syslog                     same as --format syslog; syslog
        --msgpack                    same as --format msgpack; msgpack stream format
        --json                       same as --format json; LF-separated json format
    -t, --time-key COL_NAME          time key name for json and msgpack format (e.g. 'created_at')
        --auto-create-table          Create table and database if doesn't exist


## td table:export

###usage:


    $ td table:export <db> <table>
  
###example:


    $ td table:export example_db table1 --s3-bucket mybucket -k KEY_ID -s SECRET_KEY
  
###description:


    Dump logs in a table to the specified storage
  
###options:


    -f, --from TIME                  export data which is newer than or same with the TIME
    -t, --to TIME                    export data which is older than the TIME
    -b, --s3-bucket NAME             name of the destination S3 bucket (required)
    -k, --aws-key-id KEY_ID          AWS access key id to export data (required)
    -s, --aws-secret-key SECRET_KEY  AWS secret access key to export data (required)
    -F, --file-format FILE_FORMAT    file format for exported data, either json.gz (default) or line-json.gz


## td table:swap

###usage:


    $ td table:swap <db> <table1> <table2>
  
###example:


    $ td table:swap example_db table1 table2
  
###description:


    Swap names of two tables


## td table:tail

###usage:


    $ td table:tail <db> <table>
  
###example:


    $ td table:tail example_db table1
    $ td table:tail example_db table1 -t "2011-01-02 03:04:05" -n 30
  
###description:


    Get recently imported logs
  
###options:


    -t, --to TIME                    end time of logs to get
    -f, --from TIME                  start time of logs to get
    -n, --count N                    number of logs to get
    -P, --pretty                     pretty print


## td table:partial_delete

###usage:


    $ td table:partial_delete <db> <table>
  
###example:


    $ td table:partial_delete example_db table1 --from 1341000000 --to 1341003600
  
###description:


    Delete logs from the table within the specified time range
  
###options:


    -t, --to TIME                    end time of logs to delete
    -f, --from TIME                  start time of logs to delete
    -w, --wait                       wait for finishing the job


## td table:expire

###usage:


    $ td table:expire <db> <table> <expire_days>
  
###example:


    $ td table:expire example_db table1 30
  
###description:


    Expire data in table after specified number of days


## td result:list

###usage:


    $ td result:list
  
###example:


    $ td result:list
    $ td results
  
###description:


    Show list of result URLs
  
###options:


    -f, --format FORMAT              format of the result rendering (tsv, csv, json or table. default is table)


## td result:show

###usage:


    $ td result:show <name>
  
###example:


    $ td result mydb
  
###description:


    Describe information of a result URL


## td result:create

###usage:


    $ td result:create <name> <URL>
  
###example:


    $ td result:create mydb mysql://my-server/mydb
  
###description:


    Create a result URL
  
###options:


    -u, --user NAME                  set user name for authentication
    -p, --password                   ask password for authentication


## td result:delete

###usage:


    $ td result:delete <name>
  
###example:


    $ td result:delete mydb
  
###description:


    Delete a result URL


## td schema:show

###usage:


    $ td schema:show <db> <table>
  
###example:


    $ td schema example_db table1
  
###description:


    Show schema of a table


## td schema:set

###usage:


    $ td schema:set <db> <table> [columns...]
  
###example:


    $ td schema:set example_db table1 user:string size:int
  
###description:


    Set new schema on a table


## td schema:add

###usage:


    $ td schema:add <db> <table> <columns...>
  
###example:


    $ td schema:add example_db table1 user:string size:int
  
###description:


    Add new columns to a table


## td schema:remove

###usage:


    $ td schema:remove <db> <table> <columns...>
  
###example:


    $ td schema:remove example_db table1 user size
  
###description:


    Remove columns from a table


## td sched:list

###usage:


    $ td sched:list
  
###example:


    $ td sched:list
    $ td scheds
  
###description:


    Show list of schedules
  
###options:


    -f, --format FORMAT              format of the result rendering (tsv, csv, json or table. default is table)


## td sched:create

###usage:


    $ td sched:create <name> <cron> [sql]
  
###example:


    $ td sched:create sched1 "0 * * * *" -d example_db "select count(*) from table1" -r rset1
    $ td sched:create sched1 "0 * * * *" -d example_db -q query.txt -r rset2
  
###description:


    Create a schedule
  
###options:


    -d, --database DB_NAME           use the database (required)
    -t, --timezone TZ                name of the timezone (like Asia/Tokyo)
    -D, --delay SECONDS              delay time of the schedule
    -r, --result RESULT_URL          write result to the URL (see also result:create subcommand)
    -u, --user NAME                  set user name for the result URL
    -p, --password                   ask password for the result URL
    -P, --priority PRIORITY          set priority
    -q, --query PATH                 use file instead of inline query
    -R, --retry COUNT                automatic retrying count
    -T, --type TYPE                  set query type (hive or pig)


## td sched:delete

###usage:


    $ td sched:delete <name>
  
###example:


    $ td sched:delete sched1
  
###description:


    Delete a schedule


## td sched:update

###usage:


    $ td sched:update <name>
  
###example:


    $ td sched:update sched1 -s "0 */2 * * *" -d my_db -t "Asia/Tokyo" -D 3600
  
###description:


    Modify a schedule
  
###options:


    -s, --schedule CRON              change the schedule
    -q, --query SQL                  change the query
    -d, --database DB_NAME           change the database
    -r, --result RESULT_TABLE        change the result table
    -t, --timezone TZ                change the name of the timezone (like Asia/Tokyo)
    -D, --delay SECONDS              change the delay time of the schedule
    -P, --priority PRIORITY          set priority
    -R, --retry COUNT                automatic retrying count
    -T, --type TYPE                  set query type (hive or pig)


## td sched:history

###usage:


    $ td sched:history <name> [max]
  
###example:


    $ td sched sched1 --page 1
  
###description:


    Show history of scheduled queries
  
###options:


    -p, --page PAGE                  skip N pages
    -s, --skip N                     skip N schedules
    -f, --format FORMAT              format of the result rendering (tsv, csv, json or table. default is table)


## td sched:run

###usage:


    $ td sched:run <name> <time>
  
###example:


    $ td sched:run sched1 "2013-01-01 00:00:00" -n 6
  
###description:


    Run scheduled queries for the specified time
  
###options:


    -n, --num N                      number of jobs to run
    -f, --format FORMAT              format of the result rendering (tsv, csv, json or table. default is table)


## td query

###usage:


    $ td query [sql]
  
###example:


    $ td query -d example_db -w -r rset1 "select count(*) from table1"
    $ td query -d example_db -w -r rset1 -q query.txt
  
###description:


    Issue a query
  
###options:


    -d, --database DB_NAME           use the database (required)
    -w, --wait                       wait for finishing the job
    -G, --vertical                   use vertical table to show results
    -o, --output PATH                write result to the file
    -f, --format FORMAT              format of the result to write to the file (tsv, csv, json or msgpack)
    -r, --result RESULT_URL          write result to the URL (see also result:create subcommand)
    -u, --user NAME                  set user name for the result URL
    -p, --password                   ask password for the result URL
    -P, --priority PRIORITY          set priority
    -R, --retry COUNT                automatic retrying count
    -q, --query PATH                 use file instead of inline query
    -T, --type TYPE                  set query type (hive or pig)
        --sampling DENOMINATOR       enable random sampling to reduce records 1/DENOMINATOR
    -x, --exclude                    do not automatically retrieve the job result


## td job:show

###usage:


    $ td job:show <job_id>
  
###example:


    $ td job:show 1461
  
###description:


    Show status and result of a job
  
###options:


    -v, --verbose                    show logs
    -w, --wait                       wait for finishing the job
    -G, --vertical                   use vertical table to show results
    -o, --output PATH                write result to the file
    -f, --format FORMAT              format of the result to write to the file (tsv, csv, json or msgpack)
    -x, --exclude                    do not automatically retrieve the job result


## td job:status

###usage:


    $ td job:status <job_id>
  
###example:


    $ td job:status 1461
  
###description:


    Show status progress of a job


## td job:list

###usage:


    $ td job:list [max]
  
###example:


    $ td jobs
    $ td jobs --page 1
  
###description:


    Show list of jobs
  
###options:


    -p, --page PAGE                  skip N pages
    -s, --skip N                     skip N jobs
    -R, --running                    show only running jobs
    -S, --success                    show only succeeded jobs
    -E, --error                      show only failed jobs
        --slow [SECONDS]             show slow queries (default threshold: 3600 seconds)
    -f, --format FORMAT              format of the result rendering (tsv, csv, json or table. default is table)


## td job:kill

###usage:


    $ td job:kill <job_id>
  
###example:


    $ td job:kill 1461
  
###description:


    Kill or cancel a job


## td password:change

###usage:


    $ td password:change
  
###description:


    Change password


## td server:status

###usage:


    $ td server:status
  
###description:


    Show status of the Treasure Data server


## td sample:apache

###usage:


    $ td sample:apache <path.json>
  
###description:


    Create a sample log file

