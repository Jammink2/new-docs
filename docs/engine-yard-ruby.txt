# Ruby Apps on EngineYard

## Prerequisites

  * Basic knowledge of Ruby, Gems, and Bundler
  * Basic knowledge of EngineYard
  * Ruby 1.8 or higher (for local testing)

## Data Import

It's a **4 STEP** approach. 1) **Embed** codes, 2) **Run** it, 3) **Check**, and 4) **Query** it.

### Step1: Import Data Using 'td' Gem

First, add the `td` (stands for ‘T’reasure ‘D’ata) gem to your Gemfile.

    :::ruby
    gem 'td', "~> 0.10.22"

Next, install the gem locally via bundler.

    :::term
    $ bundle install

The ‘td’ gem comes with a built-in library for recording in-app events. Insert code in the format below in order to record events from your app:

    :::ruby
    # Initialization
    require 'td'
    TreasureData::Logger.open('sample_database',
                              :apikey=>ENV['TREASURE_DATA_API_KEY'],
                              :auto_create_table=>true)
    
    # Example1: login event
    TD.event.post('login', {:uid=>123})
    
    # Example2: follow event
    TD.event.post('follow', {:uid=>123, :from=>'TD', :to=>'Heroku'})
    
    # Example3: pay event
    TD.event.post('pay',
                  {:uid=>123, :item_name=>'Stone of Jordan',
                   :category=>'ring', :price=>100, :count=>1})

Each event-logging code should be inserted near its corresponding event-generating code. Further details regarding the event logger API can be found here.

NOTE: The action name only supports alphanumeric characters and underscores. Hyphens cannot be used (an exception will be thrown).

After inserting your event-logging code, please deploy your modification on EngineYard!

### Step2: Access Your Application

First, open your application on EngineYard. The recorded events are first buffered locally, then periodically uploaded into the cloud. In the current implementation, the buffered data is uploaded in 5 minute intervals.

    :::term
    $ open http://your-site-url/

### Step3: Check Your Uploaded Data

At first, you need to setup your apikey into your local environment. Please check the apikey fron the console by clicking `Show Vars` button.

<center><img src="/images/engine_yard_addon.png" width="90%" /></center><br /><br />

Then, please set with `td apikey:set -f`. `td` command is installed with `td` gem.

    :::term
    $ td apikey:set -f 'YOUR_API_KEY_HERE'

Treasure Data Hadoop structures its data much like RDBMS: tables inside databases. In order to see the list of available databases, use the command: `td dbs`.

    :::term
    $ td dbs
    +------------------+
    | Name             |
    +------------------+
    | sample_database |
    +------------------+
    1 row in set

In order to see the tables inside the available databases, use the command: `td tables`.

    :::term
    $ td tables
    +------------------+--------+------+-------+--------+
    | Database         | Table  | Type | Count | Schema |
    +------------------+--------+------+-------+--------+
    | sample_database  | follow | log  | 1     |        |
    | sample_database  | pay    | log  | 7     |        |
    +------------------+--------+------+-------+--------+
    2 rows in set

To confirm that your application data has been uploaded properly, please check the ‘Count’ column. If any of the ‘Count’ entries are non-zero, your event logs been transferred successfully.

If your data has been uploaded properly, then use the ‘td table:tail’ command to see the recent entries of a specific table.

    :::term
    $ td table:tail sample_database follow
    {"action":"follow","uid":12345,"from":"TreasureData","to":"heroku","time":1320857514}

### Step4: Analyze Your Data

Our service lets you to analyze your data using a SQL-style language. When your data is sent to us, your logs are imported into a Hadoop/Hive cluster. Hive lets its users query big data through a SQL-like interface.

Please use the `td query` command to issue queries to TD Hadoop; TD Hadoop will accept and execute queries within the cloud.

The example query below counts the number of ‘follow’ actions that were generated by userid 12345:

    :::term
    $ td query -w -d sample_database \
      "SELECT COUNT(1) FROM follow WHERE v['uid']=12345"
    +---+
    | 0 |
    +---+
    | 1 |
    +---+
    1 row in set

The next example query counts the total number of logged actions for each day.

    :::term
    $ td query -w -d sample_database \
      "SELECT to_date(from_unixtime(time)) AS day, count(1) FROM follow GROUP BY to_date(from_unixtime(time)) ORDER BY day"
    +------------+----+
    | 0          | 1  |
    +------------+----+
    | 2011-11-09 | 1  |
    +------------+----+
    1 row in set

The `td query –format csv` command will return the results in csv format.

## Development Environment Setup

Please set `TREASURE_DATA_API_KEY` env variable For development environment.

    :::term
    $ export TREASURE_DATA_API_KEY=`td apikey:show`

Then, please start an application normally.

## Issue The Query

This is an example code of issueing the query from the Ruby program. The query API is asynchronous, and you can wait the completion by pollings (e.g. job.finished? call).

    :::ruby
    require 'td'
    require 'td-client'
    cln = TreasureData::Client.new(ENV['TREASURE_DATA_API_KEY'])
    job = cln.query('testdb', 'SELECT COUNT(1) FROM www_access')
    until job.finished?
      sleep 2
      job.update_status!
    end
    if job.success?
      job.result_each { |row| p row }
    end

## Does Upload Impact the App Performance?

Througth `td` gem, the posted records are buffered locally at first, and uploads are done every 5 minutes. Because a dedicated thread uploads the data into the cloud, it doesn't affect the response time.

There's also a size limit of the local buffer. If the local data size exceeds that limit, the records start uploaded immediately.

## Next Step

Please look at this document to know about the EngineYard addon limitation. It's important to know it, before going to other articles. Also you may be curious about our schema mechanism, which is completely different from traditional RDBMSs. Also, please look at HiveQL section for example analysis queries.

* [Schema Management](schema)
* [Hive Query Language](hive)

For more specific assistance, please visit our support resources:

* [Treasure Data Discussion Forum](http://help.treasure-data.com/)
