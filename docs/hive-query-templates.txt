# Hive Query Language (HiveQL) Templates

This article introduces **12 Hive common query templates** to calculate industry standard KPIs. These queries can be reused easily.

## Access Log Format

Here, we expect to have the simple `access` logs which only have `uid` and `time` field. We expect to store this within table named `access`.

    :::json
    {
      'uid': 123456,
      'time': 138959673
    } 

## PV (Page Views)

This query calculates the daily PV.

    :::sql
    SELECT
      TD_TIME_FORMAT(time, 'yyyy-MM-dd', 'PDT') AS d,
      COUNT(1) AS pv
    FROM access
    GROUP BY
      TD_TIME_FORMAT(time, 'yyyy-MM-dd', 'PDT')
    ORDER BY d ASC

## UU (Unique Users)

    :::sql
    SELECT
      TD_TIME_FORMAT(time, 'yyyy-MM-dd', 'PDT') AS d,
      COUNT(DISTINCT(uid)) AS uu
    FROM access
    GROUP BY
      TD_TIME_FORMAT(time, 'yyyy-MM-dd', 'PDT')
    ORDER BY d ASC

## Newly Registered Users

By looking at the `first` access of each user, you can calculate newly registered users.

<center><img src="/images/hive-template-new.png" width="60%"/></center>

    :::sql
    SELECT
      TD_TIME_FORMAT(first_access_time, 'yyyy-MM-dd', 'PDT') AS d,
      COUNT(1) AS new_user
    FROM
    (
      SELECT uid, MIN(time) AS first_access_time
      FROM access
      GROUP BY uid
    ) t1
    GROUP BY
      TD_TIME_FORMAT(first_access_time, 'yyyy-MM-dd', 'PDT')
    ORDER BY d ASC

## Average Page Views per Day

    :::sql
    SELECT
      TD_TIME_FORMAT(time, 'yyyy-MM-dd', 'PDT') AS d,
      COUNT(1) / COUNT(DISTINCT(uid)) AS access_times
    FROM access
    GROUP BY
      TD_TIME_FORMAT(time, 'yyyy-MM-dd', 'PDT')
    ORDER BY d ASC

## Access Recency Distributin

By looking at the last access day of each user, you can see the distribution of the recency of the access.

<center><img src="/images/hive-template-dist-recency.png" width="60%"/></center>

    :::sql
    SELECT uid,
      CAST( TD_SCHEDULED_TIME()-MAX(time)) / (60*60*24) AS INT ) AS term_day
    FROM access
    GROUP BY uid
    ORDER BY term_day ASC

## Access Frequency

You can see the distribution of access frequency by the query below.

<center><img src="/images/hive-template-access-frequency.png" width="50%"/></center>

    :::sql
    SELECT uid, COUNT(1) AS cnt
    FROM
    (
      SELECT uid
      FROM access
      GROUP BY uid
    ) T
    GROUP BY uid
    ORDER BY cnt

## Retention Distribution by Day

By having the difference between first access and last access, you can see the distribution of retention by day.

    :::sql
    SELECT
      access_term,
      COUNT(1) AS uu
    FROM
    ( SELECT uid as uid, 
        CAST( (MAX(time) - MIN(time)) / 86400 AS BIGINT ) AS access_term
      FROM access
      GROUP BY uid
    )t1
    GROUP BY access_term
    ORDER BY access_term ASC

## Retention Distribution by Week

By having the difference between first access and last access, you can see the distribution of retention by week.

    :::sql
    SELECT
      CAST( access_term/7 AS BIGINT ) AS access_term_by_week,
      COUNT(1) AS uu
    FROM
    ( SELECT uid, 
        CAST( (MAX(time) - MIN(time)) / 86400 AS BIGINT ) AS access_term
      FROM access
      GROUP BY uid
    )t1
    GROUP BY 
      CAST( access_term/7 AS BIGINT )
    ORDER BY access_term_by_week ASC

## Bounce Rate

The query below calculates the rate where people accessed the page once but never go to another page.

<center><img src="/images/hive-template-bounce-rate.png" width="50%" /></center>

    :::sql
    SELECT t2.d AS d,
      COUNT(1)/SUM(t2.cnt)*100 AS bounce_rate
    FROM
    (
      SELECT
        TD_TIME_FORMAT(time, 'yyyy-MM-dd', 'PDT') AS d,
        uid,
        COUNT(1) AS cnt
      FROM access
      GROUP BY
        TD_TIME_FORMAT(time, 'yyyy-MM-dd', 'PDT'),
        uid
    ) t1
    RIGHT OUTER JOIN
    (
      SELECT
        TD_TIME_FORMAT(time, 'yyyy-MM-dd', 'PDT') AS d,
        COUNT(DISTINCT uid) AS cnt
      FROM access
      GROUP BY
        TD_TIME_FORMAT(time, 'yyyy-MM-dd', 'PDT')
    ) t2
    ON ( t1.d=t2.d )
    WHERE t1.cnt < 2 AND 0 < t2.cnt
    GROUP BY t2.d
    ORDER BY d ASC

## Play Term Distribution by The Time from Registered Date

<center><img src="/images/hive-template-dist-term.png" width="50%" /></center>

    :::sql
    SELECT term, COUNT(1) AS cnt
    FROM
    (
      SELECT access_table.uid AS uid,
        datediff(access_table.most_recent_day, install_table.install_day) AS term
      FROM
      (
        SELECT uid, MAX(TD_TIME_FORMAT(time, 'yyyy-MM-dd', 'PDT')) AS most_recent_day
        FROM access
        WHERE TD_TIME_RANGE(
          time,
          TD_TIME_ADD(TD_TIME_PARSE('2012-04-04'), '-7d'),
          TD_TIME_PARSE('2012-04-04'),
          'PDT'
        )
        GROUP BY uid
      ) access_table
      JOIN
      (
        SELECT uid,
          TD_TIME_FORMAT(MIN(time) , 'yyyy-MM-dd', 'PDT') AS install_day
        FROM access
        GROUP BY uid
      ) install_table
      ON
      ( access_table.uid=install_table.uid )
      WHERE install_table.install_day < access_table.most_recent_day
    ) t
    GROUP BY term
    ORDER BY term

## Streak 5: Number of Users who Accessed Recent All 5 Days

This query calculates the number of user, who accessed 2012 4/1, 4/2, 4/3, 4/4, and 4/5.

    :::sql
    SELECT uid, access_count
    FROM
    (
      SELECT uid, COUNT(1) AS access_count
      FROM
      (
        SELECT uid, TD_TIME_FORMAT(time, 'yyyy-MM-dd', 'PDT') AS access_day
        FROM access
        WHERE TD_TIME_RANGE(
          time,
          TD_TIME_ADD(TD_TIME_PARSE('2012-04-05'), '-5d'),
          TD_TIME_PARSE('2012-04-05'), 'PDT'
        )
        GROUP BY TD_TIME_FORMAT(time, 'yyyy-MM-dd', 'PDT'), uid
      ) access_table
      GROUP BY uid
    ) t
    WHERE access_count = 5

## d4/7ï¼šHigh Frequency Users

This query calculates the people who accessed more than 4 times within 7 days.

    :::sql
    SELECT uid, access_count
    FROM
    (
      SELECT uid, COUNT(1) AS access_count
      FROM
      (
        SELECT uid, TD_TIME_FORMAT(time, 'yyyy-MM-dd', 'PDT') AS access_day
        FROM login
        WHERE TD_TIME_RANGE(
          time,
          TD_TIME_ADD( TD_TIME_PARSE('2012-04-05'), '-7d' ),
          TD_TIME_PARSE('2012-04-05')
        )
        GROUP BY TD_TIME_FORMAT(time, 'yyyy-MM-dd', 'PDT'), uid
      ) access_table
      GROUP BY uid
    ) t
    WHERE 3 < access_count
