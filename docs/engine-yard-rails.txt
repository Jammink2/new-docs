# Rails Apps on EngineYard

## Prerequisites

  * Basic knowledge of Ruby, Gems, and Bundler
  * Basic knowledge of EngineYard
  * Ruby 1.8 or higher (for local testing)

## Data Import

### Step 1: Import Data Using the `td` gem

First, add the `td` (**T**reasure **D**ata) gem to your Gemfile.

    :::ruby
    gem 'td', "~> 0.10.22"

Next, install the gem locally via `bundler`.

    :::term
    $ bundle install

The `td` gem comes with a built-in library for recording in-app events. Insert code as shown below to record events from your app:

    :::ruby
    # Example1: login event
    TD.event.post('login', {:uid=>123})
    
    # Example2: follow event
    TD.event.post('follow', {:uid=>123, :from=>'TD', :to=>'EngineYard'})
    
    # Example3: pay event
    TD.event.post('pay',
                  {:uid=>123, :item_name=>'Stone of Jordan',
                   :category=>'ring', :price=>100, :count=>1})

Your event-logging code should be placed near its corresponding event-generating code. 

Further details regarding the event logger API can be found [here](https://github.com/treasure-data/td-logger-ruby).

NOTE: The action name only supports alphanumeric characters and underscores. Hyphens cannot be used (an exception will be thrown).

Once you have inserted your event-logging code, push the modifications to EngineYard!

### Step 2: Access Your Application

First, open your application on EngineYard. The recorded events are first buffered locally, then periodically uploaded into the cloud. In the current implementation, the buffered data is uploaded every 5 minutes.

    :::term
    $ open http://your-site-url/

### Step 3: Check Your Uploaded Data

#### Set ApiKey

First, get your TD apikey for EngineYard. You can see your apikey from the console by clicking the `Show Vars` button.

<center><img src="/images/engine_yard_addon.png" width="90%" /></center><br /><br />

Next, set your apikey using `td apikey:set -f`. The `td` command is installed as part of the `td` gem.

    :::term
    $ td apikey:set -f 'YOUR_API_KEY_HERE'

#### Database Structure

Treasure Data Hadoop's data structure is like RDBMS: tables inside databases. In order to see the list of available databases, use the command: `td dbs`.

    :::term
    $ td dbs
    +------------------+
    | Name             |
    +------------------+
    | rails_production |
    +------------------+
    1 row in set

"rails_production" is the default database name. It can be modified in the config file.

#### Check Your Data

You can see the list of available tables by using the `td tables` command.

    :::term
    $ td tables
    +------------------+--------+------+-------+--------+
    | Database         | Table  | Type | Count | Schema |
    +------------------+--------+------+-------+--------+
    | rails_production | follow | log  | 1     |        |
    | rails_production | pay    | log  | 7     |        |
    +------------------+--------+------+-------+--------+
    2 rows in set

To confirm that your application data has been uploaded properly, check the "Count" column. If any of the "Count" entries are non-zero, your event logs been transferred successfully.

Once your data has been uploaded properly, use the `td table:tail` command to see the recent entries of a specific table.

    :::term
    $ td table:tail rails_production follow
    {"action":"follow","uid":12345,"from":"TreasureData","to":"EngineYard","time":1320857514}

### Step 4: Analyze Your Data

Our service lets you to analyze your data using a SQL-style language. When your data is sent to us, your logs are imported into a Hadoop/Hive cluster. Hive lets its users query big data through a SQL-like interface.

Use the `td query` command to issue queries to Treasure Data Hadoop; Treasure Data Hadoop accepts and executes queries on the cloud.

The example query below counts the number of "follow" actions that were generated by user id 12345:

    :::term
    $ td query -w -d rails_production \
      "SELECT COUNT(1) FROM follow WHERE v['uid']=12345"
    +---+
    | 0 |
    +---+
    | 1 |
    +---+
    1 row in set

The following example query counts the total number of logged actions for each day.

    :::term
    $ td query -w -d rails_production \
      "SELECT to_date(from_unixtime(time)) AS day, count(1) \
      FROM follow GROUP BY to_date(from_unixtime(time)) ORDER BY day"
    +------------+----+
    | 0          | 1  |
    +------------+----+
    | 2011-11-09 | 1  |
    +------------+----+
    1 row in set

The `td query â€“format csv` command outputs the results in csv.

## Development Environment Setup

In order to use Treasure Data Hadoop, you must set your `TREASURE_DATA_API_KEY` env variable.

    :::term
    $ export TREASURE_DATA_API_KEY=`td apikey:show`

Once it is set, you can start your application as usual.

## Writing SQL-like Queries

Below is an example of issuing a query from a Ruby program. The query API is asynchronous, and you can wait for the query to complete by polling the job periodically (e.g. by issuing `job.finished?` and `job.update_progress!` calls).

    :::ruby
    require 'td'
    require 'td-client'
    require 'ey_config'
    cln = TreasureData::Client.new(EY::Config.get(:td, 'TREASURE_DATA_API_KEY'))
    job = cln.query('testdb', 'SELECT COUNT(1) FROM www_access')
    until job.finished?
      sleep 2
      job.update_progress!
    end
    if job.success?
      job.update_status!  # get latest info
      job.result_each { |row| p row }
    end

## Does Uploading Data Impact App Performance?

When using the `td` gem, the posted records are buffered locally at first, and the data is uploaded every 5 minutes. Because a dedicated thread uploads the data into the cloud, it doesn't affect your application's response time.

The local buffer also has a size limit. If the local data exceeds this limit, the records will be uploaded immediately. This buffer size is configurable.

## Next Steps

We offer a schema mechanism that is more flexible than that of traditional RDBMSs. For queries, we leverage the Hive Query Language.

* [Schema Management](schema)
* [Hive Query Language](hive)

For more specific assistance, please visit our support center:

* [Treasure Data Support Center](http://help.treasure-data.com/)
