# Streaming Import from Python Apps

'[fluent-logger-python](http://github.com/fluent/fluent-logger-python)' is used to import data from Python applications to Treasure Data. 

This article explains how to use the fluent-logger-python library.

## Prerequisites

  * Basic knowledge of Python.
  * Basic knowledge of Treasure Data, including [the toolbelt](http://toolbelt.treasuredata.com).
  * Python 2.6 or higher (for local testing).

NOTE: The fluent-logger-python library does not work in Heroku (<a href="/articles/heroku-notes">here's why</a>) or EngineYard.

## Installing td-agent

fluent-logger-python requires 'td-agent' to be installed on your application servers. td-agent is a daemon program dedicated to the streaming upload of any kind of the time-series data. td-agent is developed and maintained by Treasure Data, Inc.

<center><img src="/images/td-agent-app.png" width="100%" /></center><br /><br />

The [fluent-logger-python](http://github.com/fluent/fluent-logger-python) library enables Python applications to post records to their local td-agent. td-agent in turn uploads the data to the cloud every 5 minutes. Because the daemon runs on a local node, the logging latency is negligible.

To set up td-agent, please refer to the following articles; we provide deb/rpm packages for Linux systems.

<table>
  <tr>
    <th>If you have...</th>
    <th>Please refer to...</th>
  </tr>
  <tr>
    <td>MacOS X</td>
    <td><a href="http://docs.fluentd.org/articles/install-by-homebrew">Installing td-agent on MacOS X</a></td>
  </tr>
  <tr>
    <td>Ubuntu System</td>
    <td><a href="http://docs.fluentd.org/articles/install-by-deb">Installing td-agent for Debian and Ubuntu</a></td>
  </tr>
  <tr>
    <td>RHEL / CentOS System</td>
    <td><a href="http://docs.fluentd.org/articles/install-by-rpm">Installing td-agent for Redhat and CentOS</a></td>
  </tr>
  <tr>
    <td>Joyent SmartOS</td>
    <td><a href="http://help.treasuredata.com/customer/portal/articles/1246933-installing-td-agent-on-joyent-smartos">Installing fluentd + td plugin on Joyent SmartOS</a></td>
  </tr>
  <tr>
    <td>AWS Elastic Beanstalk</td>
    <td><a href="https://github.com/treasure-data/elastic-beanstalk-td-agent">Installing td-agent on AWS Elastic Beanstalk</a></td>
  </tr>
</table>

NOTE: td-agent is fully open-sourced under the <a href="http://fluentd.org/">fluentd project</a>. td-agent extends fluentd with custom plugins for Treasure Data.

## Modifying /etc/td-agent/td-agent.conf

Next, please specify your authentication key by setting the `apikey` option. You can view your api key from the [console](https://console.treasuredata.com/users/current). Note: *YOUR_API_KEY* should be your actual apikey string.

    :::text
    # Treasure Data Input and Output
    <source>
      type forward
      port 24224
    </source>
    <match td.*.*>
      type tdlog
      apikey YOUR_API_KEY
      auto_create_table
      buffer_type file
      buffer_path /var/log/td-agent/buffer/td
    </match>

Please restart your agent once these lines are in place.

    :::term
    $ sudo /etc/init.d/td-agent restart

td-agent will now accept data via port 24224, buffer it (*var/log/td-agent/buffer/td*), and automatically upload it into the cloud.

## Using fluent-logger-python

First, install the fluent-logger library via pip.

    :::term
    $ pip install fluent-logger

Next, initialize and post the records as follows.

    :::python
    # Initialize
    from fluent import sender
    from fluent import event
    sender.setup('td.test_db', host='localhost', port=24224)
    event.Event('follow', {
      'from': 'userA',
      'to':   'userB'
    })

## Confirm the Import


Sending a SIGUSR1 signal will flush td-agent's buffer; upload will start immediately.

    :::term
    $ python test.py
    $ kill -USR1 `cat /var/run/td-agent/td-agent.pid`

To confirm that your data has been uploaded successfully, issue the *td tables* command as shown below.

    :::term
    $ td tables
    +------------+------------+------+-----------+
    | Database   | Table      | Type | Count     |
    +------------+------------+------+-----------+
    | test_db    | follow     | log  | 1         |
    +------------+------------+------+-----------+

## Production Deployments

### Use gunicorn, tornado or modwsgi

We recommend that you use [gunicorn](http://gunicorn.org/), [tornado](http://www.tornadoweb.org/) or [modwsgi](http://code.google.com/p/modwsgi/). Other setups have not been fully validated.

### High-Availablability Configurations of td-agent

For high-traffic websites (more than 5 application nodes), we recommend using a high availability configuration of td-agent. This will improve data transfer reliability and query performance.

* [High-Availability Configurations of td-agent](td-agent-high-availability)

### Monitoring td-agent

Monitoring td-agent itself is also important. Please refer to this document for general monitoring methods for td-agent.

* [Monitoring td-agent](td-agent-monitoring)

## Next Steps

We offer a schema mechanism that is more flexible than that of traditional RDBMSs. For queries, we leverage the Hive Query Language.

* [Schema Management](schema)
* [Hive Query Language](hive)
* [Programatic Access with REST API and its Bindings](/categories/api)

For more specific assistance, please visit our support center:

* [Treasure Data Support Center](http://help.treasuredata.com/)
