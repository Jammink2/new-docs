# Data Import from Python Applications

In order to import data from Python applications to Treasure Data, we provide a library called '[fluent-logger-python](http://github.com/fluent/fluent-logger-python)'. This article describes how to use that library.

## Prerequisites

  * Basic knowledge of Python
  * Basic knowledge of Treasure Data, including the latest installed version of the toolbelt.
  * An installed version of Python 2.6 or higher to test locally

## Install the td-agent

At first, you need to setup 'td-agent' on your application servers. ‘td-agent’ is a daemon program dedicated to the continuous upload of any kind of streaming data. td-agent is developed and maintained by Treasure Data, Inc.

Through [fluent-logger-python](http://github.com/fluent/fluent-logger-python) library, Python applications can post the records to local td-agent, and it uploads to the cloud every 5 minutes.

Please refer to the following articles in setting up td-agent. For Linux systems, we're providing deb/rpm packages for the easy installation.

<table>
  <tr>
    <th>If you have...</th>
    <th>Please look at...</th>
  </tr>
  <tr>
    <td>Debian / Ubuntu System</td>
    <td><a href="http://treasure-data.tenderapp.com/kb/installing-td-agent-daemon/installing-td-agent-for-debian-and-ubuntu">Installing td-agent for Debian and Ubuntu</a></td>
  </tr>
  <tr>
    <td>Redhat / CentOS System</td>
    <td><a href="http://treasure-data.tenderapp.com/kb/installing-td-agent-daemon/installing-td-agent-for-redhat-and-centos">Installing td-agent for Redhat and CentOS</a></td>
  </tr>
</table>

NOTE: Please note that td-agent is fully open-sourced as the <a href="http://github.com/fluent/">fluentd project</a>. td-agent is a package which contains fluentd and extension plugins for Treasure Data.

## Modify /etc/td-agent/td-agent.conf

We’ll also need to set the `apikey` option, which is a secret key to authenticate our account. Our api key can be shown by *td apikey:show*, as long as we have successfully authenticated our account using the ‘td account’ command.:

    :::term
    $ td apikey:show
    3b7118fd3ad7e35bbd3c0e4f607ec7263aa93c30

Let’s set the `apikey` option in our td-agent.conf file. Please replace *YOUR_API_KEY* to your actual apikey string.

    :::term
    # Treasure Data Input and Output
    <source>
      type forward
      port 24224
    </source>
    <match td.*.*>
      type tdlog
      apikey YOUR_API_KEY
      auto_create_table
      buffer_type file
      buffer_path /var/log/td-agent/buffer/td
    </match>

Once these lines are in place, we’ll restart our agent.

    :::term
    $ sudo /etc/init.d/td-agent restart

By this configuration, td-agent accepts the data import via 24224. When it receives the records from the applications, the records are first buffered into the local disk (*/var/log/td-agent/buffer/td*). And every 5 minutes, those are automatically uploaded into the cloud.

## Use fluent-logger-python

[fluent-logger-python](http://github.com/treasure-data/fluent-logger-python) is a Python library to record events to td-agent from a Python application. First, please install that package via pip.

    :::term
    $ pip install fluent-logger-python

Then, please insert these lines into your application, to initialize and post the events as follows.

    :::ruby
    # Initialize
    from fluent import sender
    sender.setup('test_db', host='host', port=24224)
    
    event.Event('follow', {
      'from': 'userA',
      'to':   'userB'
    })

## Confirm the Import

The posted records are first transferred to the local td-agent. td-agent buffers the records within local disk for a while, and uploads them every 5 minutes.

Rather than waiting 5 minutes, sending SIGUSR1 signal to the agent flushes its buffe,r and it starts uploading immediately.

    :::term
    $ python test.py
    $ sudo killall -SIGUSR1 td-agent

To confirm the data upload, please use *td tables*.

    :::term
    $ td tables
    +------------+------------+------+-----------+
    | Database   | Table      | Type | Count     |
    +------------+------------+------+-----------+
    | test_db    | login      | log  | 1         |
    | test_db    | follow     | log  | 1         |
    | test_db    | pay        | log  | 1         |
    +------------+------------+------+-----------+

## Production Deployments

### User gunicorn or modwsgi

Use [gunicorn](http://gunicorn.org/) or [modwsgi](http://code.google.com/p/modwsgi/). Other deployment options are not well tested.

### High-Availablability Configurations of td-agent

For highly loaded sites (more than 5 application nodes), we recommend using high availability configuration for td-agent. This improves the data transfer reliability, and also the query performance.

* [High-Availability Configurations of td-agent](td-agent-high-availability)
