# Data Import from Scala Applications

'[td-logger-java](http://github.com/treasure-data/td-logger-java)' is used to import data from Scala applications to Treasure Data. 

This article explains how to use the td-logger-java library.

## Prerequisites

  * Basic knowledge of Scala.
  * Basic knowledge of Treasure Data, including [the toolbelt](http://toolbelt.treasure-data.com).
  * JVM, Scala, [sbt](https://github.com/harrah/xsbt) v0.11 or later.

NOTE: The <a href="/articles/heroku-java">Java Apps on Heroku</a> document explains how to use Scala applications on Heroku.

## Installing td-agent

td-logger-java requires 'td-agent' to be installed on your application servers. td-agent is a daemon program dedicated to the continuous upload of any kind of streaming log data. td-agent is developed and maintained by Treasure Data, Inc.

<center><img src="/images/td-agent-app.png" width="90%" /></center><br /><br />

The [td-logger-java](http://github.com/treasure-data/td-logger-java) library enables Scala applications to post records to their local td-agent. td-agent in turn uploads the data to the cloud every 5 minutes. Because the daemon runs on a local node, the logging latency is negligible.

To set up td-agent, please refer to the following articles; we provide deb/rpm packages for Linux systems.

<table>
  <tr>
    <th>If you have...</th>
    <th>Please look at...</th>
  </tr>
  <tr>
    <td>Debian / Ubuntu System</td>
    <td><a href="http://treasure-data.tenderapp.com/kb/installing-td-agent-daemon/installing-td-agent-for-debian-and-ubuntu">Installing td-agent for Debian and Ubuntu</a></td>
  </tr>
  <tr>
    <td>Redhat / CentOS System</td>
    <td><a href="http://treasure-data.tenderapp.com/kb/installing-td-agent-daemon/installing-td-agent-for-redhat-and-centos">Installing td-agent for Redhat and CentOS</a></td>
  </tr>
</table>

NOTE: td-agent is fully open-sourced under the <a href="http://github.com/fluent/">fluentd project</a>. td-agent extends fluentd with custom plugins for Treasure Data.

## Modifying /etc/td-agent/td-agent.conf

Next, please specify your authentication key by setting the `apikey` option. You can view your api key with the *td apikey:show* command.

Note: You must first authenticate your account using the ‘td account’ command.

    :::term
    $ td apikey:show
    3b7118fd3ad7e35bbd3c0e4f607ec7263aa93c30

Next, please set the `apikey` option in your td-agent.conf file. 

Note: *YOUR_API_KEY* should be your actual apikey string.

    :::term
    # Treasure Data Input and Output
    <source>
      type forward
      port 24224
    </source>
    <match td.*.*>
      type tdlog
      apikey YOUR_API_KEY
      auto_create_table
      buffer_type file
      buffer_path /var/log/td-agent/buffer/td
    </match>

Please restart your agent once these lines are in place.

    :::term
    $ sudo /etc/init.d/td-agent restart

td-agent will now accept data via port 24224, buffer it (*var/log/td-agent/buffer/td*), and automatically upload it into the cloud.

## Using td-logger-java

First, please add the following lines to build.sbt. The logger's revision information can be found in [CHANGES.txt](https://github.com/treasure-data/td-logger-java/blob/master/CHANGES.txt).

NOTE: If you need a all-in-one jar file, we provide one at <a href="http://treasure-data.com/maven2/">http://treasure-data.com/maven2/</a>.

    :::scala
    /* in build.sbt */
    // Repositories
    resolvers ++= Seq(
      "td-logger     Maven2 Repository" at "http://treasure-data.com/maven2/",
      "fluent-logger Maven2 Repository" at "http://fluentd.org/maven2/"
    )
    // Dependencies
    libraryDependencies ++= Seq(
      "com.treasure_data" % "td-logger" % "${logger.version}"
    )

Next, please configure your *treasure-data.properties* file using the commands shown below:

    :::term
    td.logger.agentmode=true
    td.logger.agent.host=localhost
    td.logger.agent.port=24224

Finally, please insert the following lines into your application to initialize and post records. Further information regarding the API can be found [here](https://github.com/treasure-data/td-logger-java).

    :::scala
    import java.util.Properties
    import com.treasure_data.logger.TreasureDataLogger
    import scala.collection.JavaConverters._

    object Main {
      def main(args: Array[String]) {
        var props = System.getProperties();
        props.load(getClass.getResourceAsStream("treasure-data.properties"));
        var LOG = TreasureDataLogger.getLogger("my_database");
    
        var map = Map("from" -> "userA", "to" -> "userB");
        LOG.log("follow", map.asJava.asInstanceOf[java.util.Map[String, java.lang.Object]]);
      }
    }

## Confirming Data Import

Sending a SIGUSR1 signal will flush td-agent's buffer; upload will start immediately.

    :::term
    $ sbt compile run
    $ kill -USR1 `cat /var/run/td-agent/td-agent.pid`

To confirm the data upload, please use `td tables`.

    $ td tables
    +------------+------------+------+-----------+
    | Database   | Table      | Type | Count     |
    +------------+------------+------+-----------+
    | test_db    | test_table | log  | 1         |
    +------------+------------+------+-----------+

## Production Deployments

### High-Availablability Configurations of td-agent

For high-traffic websites (more than 5 application nodes), we recommend using a high availability configuration of td-agent. This will improve data transfer reliability and query performance.

* [High-Availability Configurations of td-agent](td-agent-high-availability)

## Next Steps

We offer a schema mechanism that is more flexible than that of traditional RDBMSs. For queries, we leverage the Hive Query Language.

* [Schema Management](/articles/schema)
* [Hive Query Language](http://localhost:9393/articles/hive)

For more specific assistance, please visit our support resources:

* [Treasure Data Discussion Forum](http://help.treasure-data.com/)
