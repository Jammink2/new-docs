# Streaming Import from Scala Apps

'[td-logger-java](http://github.com/treasure-data/td-logger-java)' is used to import data from Scala applications to Treasure Data. 

This article explains how to use the td-logger-java library.

## Prerequisites

  * Basic knowledge of Scala.
  * Basic knowledge of Treasure Data, including the [toolbelt](http://toolbelt.treasuredata.com).
  * JVM, Scala, [sbt](https://github.com/harrah/xsbt) v0.11 or later.

## Installing td-agent

td-logger-java requires 'td-agent' to be installed on your application servers. td-agent is a daemon program dedicated to the streaming upload of any kind of the time-series data. td-agent is developed and maintained by Treasure Data, Inc.

<center><img src="/images/td-agent-app.png" width="100%" /></center><br /><br />

The [td-logger-java](http://github.com/treasure-data/td-logger-java) library enables Scala applications to post records to their local td-agent. td-agent in turn uploads the data to the cloud every 5 minutes. Because the daemon runs on a local node, the logging latency is negligible.

To set up td-agent, please refer to the following articles; we provide deb/rpm packages for Linux systems.

<table>
  <tr>
    <th>If you have...</th>
    <th>Please refer to...</th>
  </tr>
  <tr>
    <td>MacOS X</td>
    <td><a href="http://docs.fluentd.org/articles/install-by-dmg">Installing td-agent on MacOS X</a></td>
  </tr>
  <tr>
    <td>Ubuntu System</td>
    <td><a href="http://docs.fluentd.org/articles/install-by-deb">Installing td-agent for Debian and Ubuntu</a></td>
  </tr>
  <tr>
    <td>RHEL / CentOS System</td>
    <td><a href="http://docs.fluentd.org/articles/install-by-rpm">Installing td-agent for Redhat and CentOS</a></td>
  </tr>
  <tr>
    <td>Joyent SmartOS</td>
    <td><a href="http://help.treasuredata.com/customer/portal/articles/1246933-installing-td-agent-on-joyent-smartos">Installing fluentd + td plugin on Joyent SmartOS</a></td>
  </tr>
  <tr>
    <td>AWS Elastic Beanstalk</td>
    <td><a href="https://github.com/treasure-data/elastic-beanstalk-td-agent">Installing td-agent on AWS Elastic Beanstalk</a></td>
  </tr>
</table>

NOTE: td-agent is fully open-sourced under the <a href="http://fluentd.org/">fluentd project</a>. td-agent extends fluentd with custom plugins for Treasure Data.

## Modifying /etc/td-agent/td-agent.conf

Next, please specify your API key by setting the `apikey` option. You can view your api key from the [console](https://console.treasuredata.com/users/current). Next, please set the `apikey` option in your td-agent.conf file. 

    :::text
    # Treasure Data Input and Output
    <source>
      type forward
      port 24224
    </source>
    <match td.*.*>
      type tdlog
      apikey YOUR_API_KEY
      auto_create_table
      buffer_type file
      buffer_path /var/log/td-agent/buffer/td
      use_ssl true
    </match>

NOTE: <i>YOUR_API_KEY</i> should be your actual apikey string. You can retrieve your api key from <a href="https://console.treasuredata.com/users/current" target="_blank">HERE</a>. Using the write-only key is recommended.

Please restart your agent once these lines are in place.

    :::term
    # Linux
    $ sudo /etc/init.d/td-agent restart
    
    # MacOS X
    $ sudo launchctl unload /Library/LaunchDaemons/td-agent.plist
    $ sudo launchctl load /Library/LaunchDaemons/td-agent.plist

td-agent will now accept data via port 24224, buffer it (*var/log/td-agent/buffer/td*), and automatically upload it into the cloud.

## Using td-logger-java

First, please add the following lines to build.sbt. The logger's revision information can be found in [CHANGES.txt](https://github.com/treasure-data/td-logger-java/blob/master/CHANGES.txt).

NOTE: If you need a all-in-one jar file, we provide one at <a href="http://central.maven.org/maven2/com/treasuredata/">http://central.maven.org/maven2/com/treasuredata/</a>.

    :::scala
    /* in build.sbt */
    // Dependencies
    libraryDependencies ++= Seq(
      "com.treasuredata" % "td-logger" % "${logger.version}"
    )

Next, please configure your *treasure-data.properties* file using the commands shown below:

    :::text
    td.logger.agentmode=true
    td.logger.agent.host=localhost
    td.logger.agent.port=24224
    td.logger.agent.tag=td

Finally, please insert the following lines into your application to initialize and post records. Further information regarding the API can be found [here](https://github.com/treasure-data/td-logger-java).

    :::scala
    import java.util.Properties
    import com.treasure_data.logger.TreasureDataLogger
    import scala.collection.JavaConverters._

    object Main {
      def main(args: Array[String]) {
        var props = System.getProperties();
        props.load(getClass.getResourceAsStream("treasure-data.properties"));
        var LOG = TreasureDataLogger.getLogger("test_db");
    
        var map = Map("from" -> "userA", "to" -> "userB");
        LOG.log("follow", map.asJava.asInstanceOf[java.util.Map[String, java.lang.Object]]);
      }
    }

## Confirming Data Import

First, please execute the program above.

    :::term
    $ sbt compile run

Sending a SIGUSR1 signal will flush td-agent's buffer; upload will start immediately.

    :::term
    # Linux
    $ kill -USR1 `cat /var/run/td-agent/td-agent.pid`
    
    # MacOS X
    $ sudo kill -USR1 `sudo launchctl list | grep td-agent | cut -f 1`

To confirm the data upload, please use `td tables`.

    :::term
    $ td tables
    +------------+------------+------+-----------+
    | Database   | Table      | Type | Count     |
    +------------+------------+------+-----------+
    | test_db    | follow     | log  | 1         |
    +------------+------------+------+-----------+

## Production Deployments

### High-Availablability Configurations of td-agent

For high-traffic websites (more than 5 application nodes), we recommend using a high availability configuration of td-agent. This will improve data transfer reliability and query performance.

* [High-Availability Configurations of td-agent](td-agent-high-availability)

### Monitoring td-agent

Monitoring td-agent itself is also important. Please refer to this document for general monitoring methods for td-agent.

* [Monitoring td-agent](td-agent-monitoring)

## Next Steps

We offer a schema mechanism that is more flexible than that of traditional RDBMSs. For queries, we leverage the Hive Query Language.

* [Schema Management](schema)
* [Hive Query Language](hive)
* [Programatic Access with REST API and its Bindings](/categories/api)

For more specific assistance, please visit our support center:

* [Treasure Data Support Center](http://help.treasuredata.com/)
