# Streaming Import from .NET Apps

This article explains **4 steps** to streamingly import the data from .NET applications, through Treasure Agent.

## Prerequisites

  * Basic knowledge of .NET.
  * Basic knowledge of Treasure Data.

## Step 1: Installing Treasure Agent

First of all, Treasure Agent (`td-agent`) needs to be installed on your application servers. Treasure Agent is an agent program sits within your application servers, focusing on uploading application logs to the cloud.

<center><img src="/images/td-agent-app.png" width="100%" /></center><br /><br />

Treasure Agent receives the records via HTTP, buffers them, and uploads the data to the cloud every 5 minutes. Because the daemon runs on a local node, the logging latency is negligible.

To set up Treasure Agent (`td-agent`), please refer to the following articles:

<table>
  <tr>
    <th>If you have...</th>
    <th>Please refer to...</th>
  </tr>
  <tr>
    <td>RHEL / CentOS System</td>
    <td><a href="http://docs.fluentd.org/articles/install-by-rpm">Installing td-agent for Redhat and CentOS</a></td>
  </tr>
  <tr>
    <td>Ubuntu System</td>
    <td><a href="http://docs.fluentd.org/articles/install-by-deb">Installing td-agent for Debian and Ubuntu</a></td>
  </tr>
  <tr>
    <td>MacOS X</td>
    <td><a href="http://docs.fluentd.org/articles/install-by-dmg">Installing td-agent on MacOS X</a></td>
  </tr>
  <tr>
    <td>Joyent SmartOS</td>
    <td><a href="http://help.treasuredata.com/customer/portal/articles/1246933-installing-td-agent-on-joyent-smartos">Installing fluentd + td plugin on Joyent SmartOS</a></td>
  </tr>
  <tr>
    <td>AWS Elastic Beanstalk</td>
    <td><a href="https://github.com/treasure-data/elastic-beanstalk-td-agent">Installing td-agent on AWS Elastic Beanstalk</a></td>
  </tr>
</table>

## Step 2: Modifying /etc/td-agent/td-agent.conf

Next, please specify your authentication key by setting the `apikey` option in your `/etc/td-agent/td-agent.conf` file. 

NOTE: <i>YOUR_API_KEY</i> should be your actual apikey string. You can retrieve your api key from <a href="https://console.treasuredata.com/users/current" target="_blank">HERE</a>. 

    :::text
    # Input from HTTP
    <source>
      type http
      port 8888
    </source>

    # Treasure Data Output
    <match td.*.*>
      type tdlog
      apikey YOUR_API_KEY
      auto_create_table
      buffer_type file
      buffer_path /var/log/td-agent/buffer/td
      use_ssl true
    </match>

Please restart your agent once these lines are in place.

    :::term
    $ sudo /etc/init.d/td-agent restart

td-agent will now accept data via port 24224, buffer it (*var/log/td-agent/buffer/td*), and automatically upload it into the cloud.

## Step 3: Post the records via HTTP

Please use the following code snippets to post the records to local Treasure Agent via HTTP.

    :::ruby
    using System;
    using System.Net;
    using System.IO;
    using System.Text;
    using System.Web;
    
    namespace CSharpTreasureAgentExample
    {
      class MainClass
      {
        public static void Main (string[] args)
        {
          string json_body = "{\"action\":\"login\",\"user\":2}";
          string tag = "td.production.login";
    
          // Prepare HTTP Request Object
          HttpWebRequest request = (HttpWebRequest)WebRequest.Create("http://localhost:8888/" + tag);
          request.Method = "POST";
          request.ContentType = "application/x-www-form-urlencoded";
          json_body = "json=" +  System.Web.HttpUtility.UrlEncode(json_body);
          byte[] bytes = Encoding.ASCII.GetBytes(json_body);
          request.ContentLength = bytes.Length;
    
          // Write the Request
          Stream stream = request.GetRequestStream();
          stream.Write(bytes, 0, bytes.Length);
          stream.Flush();
          stream.Close();

          // Receive the Response
          HttpWebResponse response = (HttpWebResponse)request.GetResponse();
          if (response.StatusCode == HttpStatusCode.OK) {
            using (StreamReader reader = new StreamReader (response.GetResponseStream ())) {
              Console.WriteLine (reader.ReadToEnd ());
            }
          }
          response.Close();
        }
      }
    }

## Step 4: Confirming Data Import

Please execute your probram first, then send a SIGUSR1 signal will flush td-agent's buffer; upload will start immediately.

    :::term
    $ kill -USR1 `cat /var/run/td-agent/td-agent.pid`

#### From Web Console

To confirm that your data has been uploaded successfully, check your dataset from the web browser [HERE](https://console.treasuredata.com/databases).

#### From CLI
Or, please issue the *td tables* command if you have a CLI client.

    :::term
    $ td tables
    +------------+------------+------+-----------+
    | Database   | Table      | Type | Count     |
    +------------+------------+------+-----------+
    | production | login      | log  | 1         |
    +------------+------------+------+-----------+

## Production Deployments

### High-Availablability Configurations of td-agent

For high-traffic websites (more than 5 application nodes), we recommend using a high availability configuration of td-agent. This will improve data transfer reliability and query performance.

* [High-Availability Configurations of td-agent](td-agent-high-availability)

### Monitoring td-agent

Monitoring td-agent itself is also important. Please refer to this document for general monitoring methods for td-agent.

* [Monitoring td-agent](td-agent-monitoring)

NOTE: td-agent is fully open-sourced under the <a href="http://fluentd.org/">fluentd project</a>.

## Next Steps

We offer a schema mechanism that is more flexible than that of traditional RDBMSs. For queries, we leverage the Hive Query Language.

* [Schema Management](schema)
* [Hive Query Language](hive)
* [Programatic Access with REST API and its Bindings](/categories/api)

For more specific assistance, please visit our support center:

* [Treasure Data Support Center](http://help.treasuredata.com/)
