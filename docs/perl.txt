# Data Import from Perl Applications

'[fluent-logger-perl](http://github.com/fluent/fluent-logger-perl)' is used to import data from Perl applications to Treasure Data. 

This article explains how to use the fluent-logger-perl library.

## Prerequisites

  * Basic knowledge of Perl and CPAN.
  * Basic knowledge of Treasure Data, including the latest installed version of [the toolbelt](http://toolbelt.treasure-data.com).
  * An installed version of Perl 5.10 or higher (for local testing).

NOTE: The fluent-logger-perl library does not work in Heroku. Please see the <a href="/articles/heroku-notes">Heroku Notes</a> page for further information.

## Installing td-agent

fluent-logger-perl requires 'td-agent' to be installed on your application servers. td-agent is a daemon program dedicated to the continuous upload of any kind of streaming log data. td-agent is developed and maintained by Treasure Data, Inc.

<center><img src="/images/td-agent-app.png" width="90%" /></center><br /><br />

The [fluent-logger-perl](http://github.com/fluent/fluent-logger-perl) library enables Perl applications to post records to their local td-agent. td-agent in turn uploads the data to the cloud every 5 minutes. Because the daemon runs on a local node, the logging latency is negligible.

To set up td-agent, please refer to the following articles; we provide deb/rpm packages for Linux systems.

<table>
  <tr>
    <th>If you have...</th>
    <th>Please look at...</th>
  </tr>
  <tr>
    <td>Debian / Ubuntu System</td>
    <td><a href="http://treasure-data.tenderapp.com/kb/installing-td-agent-daemon/installing-td-agent-for-debian-and-ubuntu">Installing td-agent for Debian and Ubuntu</a></td>
  </tr>
  <tr>
    <td>Redhat / CentOS System</td>
    <td><a href="http://treasure-data.tenderapp.com/kb/installing-td-agent-daemon/installing-td-agent-for-redhat-and-centos">Installing td-agent for Redhat and CentOS</a></td>
  </tr>
</table>

NOTE: td-agent is fully open-sourced under the <a href="http://github.com/fluent/">fluentd project</a>. td-agent extends fluentd with custom plugins for Treasure Data.

## Modify /etc/td-agent/td-agent.conf

Next, please specify your authentication key by setting the `apikey` option. You can view your api key with the *td apikey:show* command.

Note: You must first authenticate your account using the ‘td account’ command.

    :::term
    $ td apikey:show
    3b7118fd3ad7e35bbd3c0e4f607ec7263aa93c30

Let’s set the `apikey` option in our td-agent.conf file. Please replace *YOUR_API_KEY* to your actual apikey string.

    :::term
    # Treasure Data Input and Output
    <source>
      type forward
      port 24224
    </source>
    <match td.*.*>
      type tdlog
      apikey YOUR_API_KEY
      auto_create_table
      buffer_type file
      buffer_path /var/log/td-agent/buffer/td
    </match>

Once these lines are in place, we’ll restart our agent.

    :::term
    $ sudo /etc/init.d/td-agent restart

We have now enabled td-agent to read, and upload our log data into the cloud via port 24224.

## Use fluent-logger-perl

[fluent-logger-perl](http://github.com/fluent/fluent-logger-perl) is a Perl library to post the records to td-agent from a Perl application. At first, please install *Fluent::Logger* library via CPAN.

    :::term
    $ cpan
    cpan[1]> install Fluent::Logger

Then, please initialize and post the records as follows.

#### test.pl

    :::php
    use Fluent::Logger;
    my $logger = Fluent::Logger->new(
        host => '127.0.0.1',
        port => 24224,
        tag_prefix => 'td.test_db',
    );
    $logger->post("test_table", { "entry1" => "value1", "entry2" => 2 });

## Confirm the Import

The posted records are first transferred to the local td-agent. td-agent buffers the records within local disk for a while, and uploads them every 5 minutes.

NOTE: The first argument of post() determines the database name and table name. If you specify 'td.test_db.test_table', the data will be imported into *test_table* table within *test_db* database. Those are automatically created at the upload time.

Rather than waiting 5 minutes, sending SIGUSR1 signal to the agent flushes its buffe,r and it starts uploading immediately.

    :::term
    $ perl test.pl
    $ kill -USR1 `cat /var/run/td-agent/td-agent.pid`

To confirm the data upload, please use `td tables`.

    $ td tables
    +------------+------------+------+-----------+
    | Database   | Table      | Type | Count     |
    +------------+------------+------+-----------+
    | test_db    | test_table | log  | 1         |
    +------------+------------+------+-----------+

## Production Deployments

### High-Availablability Configurations of td-agent

For highly loaded sites (more than 5 application nodes), we recommend using high availability configuration for td-agent. This improves the data transfer reliability, and also the query performance.

* [High-Availability Configurations of td-agent](td-agent-high-availability)

## Next Step

Next, you may be curious about our schema mechanism, which is completely different from traditional RDBMSs. Also, please look at HiveQL section to know more about queries.

* [Schema Management](/articles/schema)
* [Hive Query Language](http://localhost:9393/articles/hive)

For more specific assistance, please visit our support resources:

* [Treasure Data Discussion Forum](http://help.treasure-data.com/)
