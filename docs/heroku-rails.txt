# Rails Apps on Heroku

## Prerequisites

  * Basic knowledge of Ruby, Gems, and Bundler
  * Basic knowledge of Heroku, including the Heroku toolbelt.
  * Ruby 1.8 or higher (for local testing)

## Data Import

### Step 1: Import Data Using `td` gem

First, add the `td` (stands for **T**reasure **D**ata) gem to your Gemfile.

    :::ruby
    gem 'td', "~> 0.10.22"

Next, install the gem locally via `bundler`.

    :::term
    $ bundle install

The `td` gem comes with a built-in library for recording in-app events. Insert code in the format below in order to record events from your app:

    :::ruby
    # Example1: login event
    TD.event.post('login', {:uid=>123})
    
    # Example2: follow event
    TD.event.post('follow', {:uid=>123, :from=>'TD', :to=>'Heroku'})
    
    # Example3: pay event
    TD.event.post('pay',
                  {:uid=>123, :item_name=>'Stone of Jordan',
                   :category=>'ring', :price=>100, :count=>1})

Each event-logging code should be inserted near its corresponding event-generating code. Further details regarding the event logger API can be found here.

NOTE: The action name only supports alphanumeric characters and underscores. Hyphens cannot be used (an exception would be thrown).

After inserting your event-logging code, push the modifications to Heroku!

    :::term
    $ git commit -a -m "Added Treasure Data Plugin"
    $ git push heroku master

### Step 2: Access Your Application

First, open your application on Heroku. The recorded events are first buffered locally, then periodically uploaded into the cloud. In the current implementation, the buffered data is uploaded every 5 minutes.

    :::term
    $ heroku open

### Step 3: Check Your Uploaded Data

#### Database Structure

Treasure Data Hadoop structures its data much like RDBMS: tables inside databases. You can see the list of available databases with `heroku td dbs`.

    :::term
    $ heroku td dbs
    +------------------+
    | Name             |
    +------------------+
    | rails_production |
    +------------------+
    1 row in set

"rails_production" is the default database name but can be modified with the config file.

#### Check Your Data

You can see the list of available tables with `heroku td tables`.

    :::term
    $ heroku td tables
    +------------------+--------+------+-------+--------+
    | Database         | Table  | Type | Count | Schema |
    +------------------+--------+------+-------+--------+
    | rails_production | follow | log  | 1     |        |
    | rails_production | pay    | log  | 7     |        |
    +------------------+--------+------+-------+--------+
    2 rows in set

To confirm that your application data has been uploaded properly, check the "Count" column. If any of the "Count" entries are non-zero, your event logs been transferred successfully.

If your data has been uploaded properly, then use the `heroku td table:tail` command to see the recent entries of a specific table.

    :::term
    $ heroku td table:tail rails_production follow
    {"action":"follow","uid":12345,"from":"TreasureData","to":"heroku","time":1320857514}

### Step 4: Analyze Your Data

Our service lets you to analyze your data using a SQL-style language. When your data is sent to us, your logs are imported into a Hadoop/Hive cluster. Hive lets its users query big data through a SQL-like interface.

Please use the ‘heroku td query’ command to issue queries to TD Hadoop; TD Hadoop will accept and execute queries within the cloud.

The example query below counts the number of ‘follow’ actions that were generated by userid 12345:

    :::term
    $ heroku td query -w -d rails_production \
      "SELECT COUNT(1) FROM follow WHERE v['uid']=12345"
    +---+
    | 0 |
    +---+
    | 1 |
    +---+
    1 row in set

The next example query counts the total number of logged actions for each day.

    :::term
    $ heroku td query -w -d rails_production \
      "SELECT to_date(from_unixtime(time)) AS day, count(1) \
      FROM follow GROUP BY to_date(from_unixtime(time)) ORDER BY day"
    +------------+----+
    | 0          | 1  |
    +------------+----+
    | 2011-11-09 | 1  |
    +------------+----+
    1 row in set

The `heroku td query –format csv` command outputs the results in csv.

## Development Environment Setup

In order to use Treasure Data Hadoop, you must set `TREASURE_DATA_API_KEY` env variable.

    :::term
    $ export TREASURE_DATA_API_KEY=`heroku td apikey:show`

Then, start your application as usual.

## Writing SQL-like Queries

Below is an example of how to query the data from Ruby. Observe that the query API is asynchronous, and we poll for the completion of the job with `job.finished?` and `job.update_status!`.

    :::ruby
    require 'td'
    require 'td-client'
    cln = TreasureData::Client.new(ENV['TREASURE_DATA_API_KEY'])
    job = cln.query('testdb', 'SELECT COUNT(1) FROM www_access')
    until job.finished?
      sleep 2
      job.update_status!
    end
    if job.success?
      job.result_each { |row| p row }
    end

## Does Upload Impact App Performance?

The performance impact should be negligible. The td-logger library buffers data locally, and a separate, dedicated thread uploads the data to the cloud asynchronously.

Note that if the buffer fills up, the data upload starts right away. The buffer size is configurable.

## Next Step

We have outlined [some caveats](/articles/heroku-notes) on using Treasure Data Hadoop addon. Also, you might want to consult [this article](/articles/schema) to learn more about our schema management. We also have a [little write-up](/articles/hive) on our SQL-like, Hive-compataible language.

For further assistance, please consult our support forum.

* [Treasure Data Discussion Forum](http://help.treasure-data.com/discussions)
