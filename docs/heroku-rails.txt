# Rails Apps on Heroku

## Prerequisites

  * Basic knowledge of Ruby, Gems, and Bundler.
  * Basic knowledge of Heroku, including the Heroku toolbelt.
  * Ruby 1.8 or higher (for local testing).

## Data Import

### Step 1: Import Data Using the `td` gem

First, add the `td` (**T**reasure **D**ata) gem to your Gemfile.

    :::ruby
    gem 'td', "~> 0.10.22"

Next, install the gem locally via `bundler`.

    :::term
    $ bundle install

The ‘td’ gem comes with a built-in library for recording in-app events. Insert code as shown below to record events from your app:

    :::ruby
    # Example1: login event
    TD.event.post('login', {:uid=>123})
    
    # Example2: follow event
    TD.event.post('follow', {:uid=>123, :from=>'TD', :to=>'Heroku'})
    
    # Example3: pay event
    TD.event.post('pay',
                  {:uid=>123, :item_name=>'Stone of Jordan',
                   :category=>'ring', :price=>100, :count=>1})


Your event-logging code should be placed near its corresponding event-generating code. 

Further details regarding the event logger API can be found [here](https://github.com/treasure-data/td-logger-ruby).

NOTE: The action name only supports alphanumeric characters and underscores. Hyphens cannot be used (an exception will be thrown).

Once you have inserted your event-logging code, push the modifications to Heroku!

    :::term
    $ git commit -a -m "Added Treasure Data Plugin"
    $ git push heroku master

### Step 2: Access Your Application

First, open your application on Heroku. The recorded events are first buffered locally, then periodically uploaded into the cloud. In the current implementation, the buffered data is uploaded every 5 minutes.

    :::term
    $ heroku open

### Step 3: Check Your Uploaded Data

#### Database Structure

Treasure Data Hadoop's data structure is like RDBMS: tables inside databases. In order to see the list of available databases, use the command: `heroku td dbs`.

    :::term
    $ heroku td dbs
    +------------------+
    | Name             |
    +------------------+
    | rails_production |
    +------------------+
    1 row in set

"rails_production" is the default database name. It can be modified in the config file.

#### Check Your Data

You can see the list of available tables by using the `heroku td tables` command.

    :::term
    $ heroku td tables
    +------------------+--------+------+-------+--------+
    | Database         | Table  | Type | Count | Schema |
    +------------------+--------+------+-------+--------+
    | rails_production | follow | log  | 1     |        |
    | rails_production | pay    | log  | 7     |        |
    +------------------+--------+------+-------+--------+
    2 rows in set

To confirm that your application data has been uploaded properly, check the "Count" column. If any of the "Count" entries are non-zero, your event logs been transferred successfully.

Once your data has been uploaded properly, use the `heroku td table:tail` command to see the recent entries of a specific table.

    :::term
    $ heroku td table:tail rails_production follow
    {"action":"follow","uid":12345,"from":"TreasureData","to":"heroku","time":1320857514}

### Step 4: Analyze Your Data

Our service lets you to analyze your data using a SQL-style language. When your data is sent to us, your logs are imported into a Hadoop/Hive cluster. Hive lets its users query big data through a SQL-like interface.

Use the `heroku td query` command to issue queries to Treasure Data Hadoop; Treasure Data Hadoop accepts and executes queries on the cloud.

The example query below counts the number of "follow" actions that were generated by user id 12345:

    :::term
    $ heroku td query -w -d rails_production \
      "SELECT COUNT(1) FROM follow WHERE v['uid']=12345"
    +---+
    | 0 |
    +---+
    | 1 |
    +---+
    1 row in set

The following example query counts the total number of logged actions for each day.

    :::term
    $ heroku td query -w -d rails_production \
      "SELECT to_date(from_unixtime(time)) AS day, count(1) \
      FROM follow GROUP BY to_date(from_unixtime(time)) ORDER BY day"
    +------------+----+
    | 0          | 1  |
    +------------+----+
    | 2011-11-09 | 1  |
    +------------+----+
    1 row in set

The `heroku td query –format csv` command outputs the results in csv.

## Development Environment Setup

In order to use Treasure Data Hadoop, you must set your `TREASURE_DATA_API_KEY` env variable.

    :::term
    $ export TREASURE_DATA_API_KEY=`heroku td apikey:show`

Once it is set, you can start your application as usual.

## Writing SQL-like Queries

Below is an example of issuing a query from a Ruby program. The query API is asynchronous, and you can wait for the query to complete by polling the job periodically (e.g. by issuing job.finished? calls).

    :::ruby
    require 'td'
    require 'td-client'
    cln = TreasureData::Client.new(ENV['TREASURE_DATA_API_KEY'])
    job = cln.query('testdb', 'SELECT COUNT(1) FROM www_access')
    until job.finished?
      sleep 2
      job.update_status!
    end
    if job.success?
      job.result_each { |row| p row }
    end

## Does Uploading Data Impact App Performance?

When using the `td` gem, the posted records are buffered locally at first, and the data is uploaded every 5 minutes. Because a dedicated thread uploads the data into the cloud, it doesn't affect your application's response time.

The local buffer also has a size limit. If the local data exceeds this limit, the records will be uploaded immediately.

## Next Steps

The Heroku Addon Notes document explains the limitations of Heroku addons. We recommend that you review this information before moving on to other articles.  

We offer a schema mechanism that is more flexible than that of traditional RDBMSs. For queries, we leverage the Hive Query Language.

* [Heroku Addon Notes](heroku-notes)
* [Schema Management](schema)
* [Hive Query Language](hive)

For more specific assistance, please visit our support resources:

* [Treasure Data Discussion Forum](http://help.treasure-data.com/)