# Performance Tuning

## Prerequisites

  * Basic knowledge of Treasure Data, including [the toolbelt](http://toolbelt.treasuredata.com).
  * Basic knowledge of [the Hive query language](hive).

## Leveraging Time-based Partitioning

All imported data is automatically partitioned into hourly buckets, based on the **'time'** field within each data record. **By specifying the time range to query, you avoid reading unnecessary data and can thus speed up your query significantly.**

### 1) WHERE time <=> Integer

**When the 'time' field within the WHERE clause is specified**, the query parser will automatically detect which partition(s) should be processed. Please note that this auto detection will not work *if you specify the time with `float` instead of `int`.*

    :::sql
    [GOOD]: SELECT field1, field2, field3 FROM tbl WHERE time > 1349393020
    [GOOD]: SELECT field1, field2, field3 FROM tbl WHERE time > 1349393020 + 3600
    [GOOD]: SELECT field1, field2, field3 FROM tbl WHERE time > 1349393020 - 3600
    [BAD]:  SELECT field1, field2, field3 FROM tbl WHERE time > 13493930200 / 10 
    [BAD]:  SELECT field1, field2, field3 FROM tbl WHERE time > 1349393020.00
    [BAD]:  SELECT field1, field2, field3 FROM tbl WHERE time BETWEEN 1349392000 AND 1349394000

### 2) TD_TIME_RANGE

**An easier way to slice the data is to use [TD_TIME_RANGE UDF](udfs#tdtimerange)**.

    :::sql
    SELECT ... WHERE TD_TIME_RANGE(time, "2013-01-01 PDT")
    SELECT ... WHERE TD_TIME_RANGE(time, "2013-01-01", NULL, "PDT")
    SELECT ... WHERE TD_TIME_RANGE(time, "2013-01-01",
                                   TD_TIME_ADD("2013-01-01", "1day", "PDT"))

## Set Custom Schema

As explained in the [Schema Management](schema) article, all tables have two fields: 'v' and 'time'. In addition to these, you can set [custom schema](schema#setting-custom-schema) on the tables.

    :::term
    $ td schema:set testdb www_access action:string user:int
    $ td query -w -d testdb "SELECT user, COUNT(1) AS cnt
         FROM www_access
         WHERE action='login'
         GROUP BY user ORDER BY cnt DESC"

After setting the schema, **queries issued with named columns instead of 'v'** will use the schema information to achieve a more optimized execution path. In particular, GROUP BY performance will improve significantly.

## Use Hive's Mapjoin

If all but one of the tables being joined are small, Hive can perform the join on the mapper side in memory. This can greatly reduce the query time by cutting down on the number of mappers and/or stages in the mapreduce pipeline.

    :::sql
    SELECT /*+ MAPJOIN(tbl2) */ ... FROM tbl1 join tbl2 on tbl1.key = tbl2.key

In this example, we're specifying `tbl2` as a Mapjoin table that is much smaller than `tbl1` and should fit in memory. For more information on this optimization, please refer to the [Hive documentation](https://cwiki.apache.org/confluence/display/Hive/LanguageManual+Joins#LanguageManualJoins-Mapjoinrestrictions).

## DISTRIBUTE BY...SORT BY v. ORDER BY

In Hive, ORDER BY is not a very fast operation because it forces all the data to go into the same reducer node. By doing this, Hive ensures that the entire dataset is totally ordered.

However, sometimes we do not require total ordering. For example, suppose you have a table called `user_action_table` where each row has `user_id`, `action`, and `time`. Your goal is to order them by time **per user_id**.

If you are doing this with ORDER BY, you would run

    :::sql
    SELECT time, user_id, action FROM user_action_table
    ORDER BY time

However, you can achieve the same result with

    :::sql
    SELECT time, user_id, action FROM user_action_table
    DISTRIBUTE BY user_id SORT BY time

This is because all the rows belonging to the same user_id go to the same reducer ("DISTRIBUTE BY user_id") and in each reducer, rows are sorted by time ("SORT BY time"). This is faster than the other query because it uses multiple reducers as opposed to a single reducer.

You can learn more about the differences between ORDER BY and SORT BY [here](https://cwiki.apache.org/confluence/display/Hive/LanguageManual+SortBy#LanguageManualSortBy-DifferencebetweenSortByandOrderBy).
