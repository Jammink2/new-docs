# Presto Query Engine

[Treasure Data](http://treasuredata.com/) is a Hadoop-based Big Data analytics platform. Treasure Data supports Presto as a low-latency query engine.

This feature is currently in **beta** and it is only available to certain accounts at this time - please contact your account representative if you would like to join the beta.

NOTE: This is a <b>Premium</b> plan feature. Not available for everyone. Please <a href="<%= @env[:url_contact] %>" target="_blank"> contact to us </a>. if you're interested in.

## What is Presto?

[Presto](https://github.com/facebook/presto) is an open-source parallel SQL execution engine. Unlike Hive, Presto doesn't use the map reduce framework for its execution. Instead, Presto directly accesses the data through a specialized distributed query engine that is very similar to those found in commercial parallel RDBMSs.

<center><img src="https://scontent-a-sjc.xx.fbcdn.net/hphotos-prn2/t1.0-9/s720x720/1467246_10151935581722200_1107575290_n.png" width="80%" /></center><br />

Treasure Data has customized Presto to talk directly with our distributed columnar storage layer. As a result, the end user experience is nearly identical to querying Hive.

### Does Presto Replace Hive?

**No**. Hive is designed for batch processing, while Presto is designed for short interactive queries useful for data exploration.

Presto currently has limited fault tolerance capabilities when querying. If a process fails while processing, the whole query must be re-run. On the other hand, it executes queries 10-30x faster than Hive. Thus, even if there is a process failure and a query must be restarted, the total runtime will often still beat Hive's significantly.

Another caveat is that Presto has an in-memory only architecture. So if there is a particularly large data set which exceeds the total memory capacity available to Presto, query execution will fail.

Even with Presto as part of our ecosystem, MapReduce and Hive will continue to have many viable use cases (for example: long-running data transformation workloads).

## How to Use Presto?

### Web Console

From the [web console](https://console.treasuredata.com), on the New Query page select "Presto" as the query type.

<center><img src="/images/console-query-presto.png" width="75%" /></center><br />

### PostgreSQL Protocol Gateway

Presto also provides PostgreSQL gateway, which talks PostgreSQL protocol. You can issue the query to Treasure Data, as if it's running PostgreSQL.

- [Presto PostgreSQL Gateway](presto-postgresql-gateway)

### CLI

Using the [CLI](/articles/command-line), specify `-T presto` in the `td query` command. A v0.10.99 or newer client is required.

    :::term
    $ td query -w -T presto -d testdb \
      "SELECT code, COUNT(1) FROM www_access GROUP BY code"

### REST API

For REST API, the endpoint is `/v3/job/issue/presto/:database`.

## Presto Query Language Reference

Presto supports industry-standard SQL-92 syntax.

* [Presto SQL Syntax](http://prestodb.io/docs/current/sql/select.html)
* [Presto Function and Operators](http://prestodb.io/docs/current/functions.html)

## Supported UDFs

* [List of UDFs in Presto](presto-udfs)

## Known Limitations

* [Presto Known Limitations](presto-known-limitations)

## See Also

* [Presto Documentation](http://prestodb.io/docs/current/)
* [Presto: Interacting with petabytes of data at Facebook](https://www.facebook.com/notes/facebook-engineering/presto-interacting-with-petabytes-of-data-at-facebook/10151786197628920)
