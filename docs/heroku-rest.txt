# Data Import from REST API on Heroku

This article describes how to run `td-agent` on Heroku. `td-agent` is a daemon to import data to Treasure Data Hadoop. `td-agent` itself is versatile and can accept data from various sources, but due to limitations of the Heroku platform, `td-agent` can only accept HTTP inputs when it is deployed on Heroku.

## Confirm Your API key

Let's start by enabling the Treasure Data Add-on.

    :::term
    # Enable Addon
    $ heroku addons:add treasure-data

Next, install the `heroku-td` CLI plugin and check your API key.

    :::term
    # Install heroku-td Plugin
    $ gem install td
    $ heroku plugins:install https://github.com/treasure-data/heroku-td.git
    
    # Confirm your API key
    $ heroku td apikey:show
    2d14b1872cb789ed3733d4aa26ae8e6aba30bbbd

## Create Your App

We are ready to set up `td-agent` as a separate Heroku application. This application becomes your central log aggregation server. We provide [a boilerplate repository](https://github.com/treasure-data/heroku-td-agent) to get you started.

The following steps create your log aggregation server as a Heroku application.

    :::term
    # Clone
    $ git clone git://github.com/treasure-data/heroku-td-agent.git
    $ cd heroku-td-agent
    
    # Set your API key
    $ vi td-agent.conf
    $ git commit -a -m 'update apikey'
    
    # Create the app & deploy
    $ heroku create --stack cedar
    $ git push heroku master

## Test

Let's make sure the log aggregation server is set up correctly. In the following example, we are sending a GET request to the log server at `http://td-agent-on-heroku.herokuapp.com` to log the event `{ "json": "message" }` in `sample_table` in `sample_db`. Note how the JSON-formatted data is passed as a query parameter value.

    :::term
    $ curl "http://td-agent-on-heroku.herokuapp.com/td.sample_db.sample_table?json=%7B%22json%22%3A%22message%22%7D"

In general, the format is 
    
    :::code
    http://{YOUR LOG SERVER DOMAIN}/td.{DB_NAME}.{TABLE_NAME}?json={JSON_FORMATTED_DATA}

You can run the command `heroku td tables` to make sure data is getting uploaded successfully.

    :::term
    $ heroku td tables
    +------------------+---------------+------+-------+--------+
    | Database         | Table         | Type | Count | Schema |
    +------------------+---------------+------+-------+--------+
    | sample_db        | sample_table  | log  | 1     |        |
    +------------------+---------------+------+-------+--------+
    1 rows in set

Logs get uploaded every 5 minutes.
