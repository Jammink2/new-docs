# Writing the Query Results into your MySQL Tables.

This guide shows you how to write job results into your existing MySQL instance.

## Prerequisites

  * Basic knowledge of Treasure Data, including [the toolbelt](http://toolbelt.treasure-data.com).
  * **MySQL instance**. Treasure Data must have SELECT, INSERT, DELETE, CREATE, DROP and ALTER privileges.

## Architecture

A frontend application posts data to Treasure Data. Treasure Data runs MapReduce jobs and writes the result output into your MySQL tables.

<center><img src="/images/result_rdbms.png" width="90%" /></center><br /><br />

This is a pretty common architecture. Here is a couple of examples.

#### Example 1: Ranking: "What's Top N of X?"

Every social/mobile application calculates "top N of X" (ex: top 5 movies watched today). Treasure Data already takes care of warehousing the raw data, and with this "write-to-MySQL" feature, it takes care of persisting the "top N" data as well.

#### Example 2: Dashboard Application

If you're a data scientist, you need to keep track of a range of metrics every hour/day/month and make them accessible by visualizing them properly. Using this "write-to-MySQL" feature, you can streamline the process and focus on what to query and how to visualized the query results.

## Basic Usage

### For Ad-hoc Jobs

Just add `-r` option to `td query`. After the job is finished, the results are written into your table.

    :::sql
    $ td query -r 'mysql://user:password@host/database/table' \
      -w -d testdb \
      "SELECT v['code'], COUNT(1) FROM www_access GROUP BY v['code']"      

### For Scheduled Jobs

Just add `-r` option when you are scheduling a job. Every time the job runs, the results are written into `mytbl`.

    :::term
    $ td result:create mydb mysql://user:password@host/database
    $ td sched:create hourly_count_example "0 * * * *" -d testdb "select count(*) from www_access" -r mydb:mytbl

## 3 ways to modify data (append/replace/truncate)

You can add/delete data in three different ways.

    :::term
    mysql://user:password@host/database/table               # append
    mysql://user:password@host/database/table?mode=append   # append
    mysql://user:password@host/database/table?mode=replace  # replace
    mysql://user:password@host/database/table?mode=truncate # truncate

All three modes are **atomic**.

### APPEND

This is the default mode. Query results are appended to a table. If the table doesn't exist yet, it would be created on the fly.

### REPLACE

If the table already exists, the rows of the existing table are replaced with the query results. If the table doesn't exist yet, it is created on the fly.

We achieve **atomicity** (so that a consumer of the table always has consistent data) by performing the following three steps in a **single transaction**.

1. Create a temporary table.
2. Write to the temporary table.
3. Replace the existing table with the temporary table by ALTER TABLE RENAME.

### TRUNCATE

The system first truncates the existing table, and the query results are inserted into that table. If table doesn't exist, a new table will be created.

**Unlike REPLACE, TRUNCATE retains the indexes of your table.**
