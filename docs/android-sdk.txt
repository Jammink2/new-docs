# Treasure Data Android SDK

This article get you started sending data from your Android app to Treasure Data, using our Android SDK library. Using these steps, you don't need to install anything server-side to track your mobile application's activities.

## Prerequisites

  * Basic knowledge of Android Development
  * Android 2.3 , or later
  * Basic knowledge of Treasure Data.

## How to install Android SDK?

This video demonstrates how to install Android SDK in 5 minutes.

<iframe width="780" height="525" src="//www.youtube-nocookie.com/embed/nVwTMABEouI?rel=0&theme=light&modestbranding=1&showinfo=0" frameborder="1" allowfullscreen></iframe>

### Step 1: Install the Library

#### Maven

If you use maven, add the following directives to your `pom.xml` under `<dependencies>`. `pom.xml` in [an example Android application project](https://github.com/treasure-data/td-android-sdk/blob/master/example/td-android-sdk-demo/pom.xml) could be a good reference.

    :::xml
    <dependency>
      <groupId>com.treasuredata</groupId>
      <artifactId>td-android-sdk</artifactId>
      <version>0.1.6</version>
    </dependency>

#### Jar File

If you don't use Maven, please put td-android-sdk-x.x.x-shaded.jar (get the latest [here](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.treasuredata%22%20AND%20a%3A%22td-android-sdk%22)) into (YOUR_ANDROID_PROJECT)/libs.

### Step 2: Initialize the Library

#### Enable Required Android Permissions

If it’s not already present, add the INTERNET permission to your AndroidManifest.xml file. The entry below should appear between the `<manifest> .. </manifest>` tags. The example is [here](https://github.com/treasure-data/td-android-sdk/blob/master/example/td-android-sdk-demo/AndroidManifest.xml#L10).

    :::xml
    <uses-permission android:name="android.permission.INTERNET"/>

#### Create Client

Create the `TreasureData` object with your API key. The recommended place to do this is in the `onCreate()` method of your main activity. Here’s some example code:

    :::java
    public class ExampleActivity extends Activity {
      private TreasureData td;

      @Override
      protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        TreasureData.initializeApiEndpoint("https://<%= @env[:sdk_endpoint] %>");
        td = new TreasureData(this, "YOUR_API_KEY");
        ...

        // This is optional, but you can encrypt the buffered data on mobile
        // devices. You can prevent people from checking the buffered events
        // on the disk.
        // TreasureData.initializeEncryptionKey("RANDOM_STRING_TO_ENCRYPT_DATA");
      }
    }

You can get the API key from the ([Treasure Data Console](<%= @env[:url_profile] %>)). It's recommended to use a [**write-only API key**](access-control#rest-apis-access) for SDKs.

Also, you can use a shared instance from anywhere with `TreasureData.sharedInstance()` method after calling `TreasureData.initializeSharedInstance()`.

    :::java
    public class MainActivity extends Activity {
      		:
    	TreasureData.initializeDefaultApiKey("your_write_apikey");
    	TreasureData.initializeEncryptionKey("hello world");
      		:
    	TreasureData.initializeSharedInstance(this);
    	TreasureData.sharedInstance().setDefaultDatabase("testdb");
      		:
    }

   public class OtherActivity extends Activity {
     		:
   	TreasureData.sharedInstance().addEvent("demotbl", "elapsed_time", elapsed_time);
     		:

### Step 3: Send Events to the Cloud

Next, call the `addEvent()` function at the appropriate timing within your applications. This example sends an event to the `demotbl` table in database `testdb`, when the button is clicked.

    :::java
    View v = findViewById(R.id.button);
    v.setOnClickListener(new OnClickListener() {
      @Override
      public void onClick(View v) {
        final Map event = new HashMap<String, Object>();
        event.put("name", "foo bar");
        event.put("age", 42);
        event.put("comment", "hello world");
        td.addEvent("testdb", "demotbl", event);
      }
    });

By default, all events will be bufferred to the file. You **need to explicitly flush** the bufferred data to the cloud. It won't be uploaded automatically.  To do this:

    :::java
    td.uploadEvents();
or
    :::java
    td.uploadEventsWithCallback();

If you want to add the unique id of the device or device model information, you can use `enableAutoAppendUniqId()` or `enableAutoAppendModelInformation()` methods.

    :::java
    td.enableAutoAppendUniqId();
    td.enableAutoAppendModelInformation();
    td.addEvent("demotbl", "name", "foo bar");
    // => {"td_uuid":"c123470de-3950-4997-b321-07d6f5b4a3",
    //     "td_os_type":"Android",
    //     "td_os_ver":"15",
    //     "td_device":"ISW11SC",
    //     "td_model":"ISW11SC",
    //     "td_display":"IMM76D.KDLPL",
    //     "td_brand":"KDDI",
    //     "td_board":"ISW11SC",
    //     "name":"foo bar",
    //     ... }

Also, you can append session information to each event using `startSession()` and `endSession()` methods.

    :::java
    TreasureData.sharedInstance().startSession("demotbl");
    // => {"td_session_id":"10216937-2B47-4399-8DD5-E9E85350584B", "td_session_event":"start", ... }
    TreasureData.sharedInstance().addEvent("demotbl", "app_event", "click0");
    // => {"td_session_id":"10216937-2B47-4399-8DD5-E9E85350584B", "app_event":"click0", ... }
    TreasureData.sharedInstance().endSession("demotbl");
    // => {"td_session_id":"10216937-2B47-4399-8DD5-E9E85350584B", "td_session_event":"end", ... }
    TreasureData.sharedInstance().addEvent("demotbl", "app_event", "click1");
    // => {"app_event":"click1", ... }

The following code uploads the event when your application goes to the background. You can do this whenever you like. The uploader doesn't block the main UI thread.

    :::java
    @Override
    protected void onPause() {
      td.uploadEvents();
      super.onPause();
    }

If you want to do something after adding a event or uploading buffered events, you can use `addEventWithCallback()` or `uploadEventsWithCallback()`.

    :::java
    td.addEventWithCallback("testdb", "demotbl", event, new TDCallback() {
      @Override
      public void onSuccess() {
        Log.i("ExampleApp addEvent", "success!");
      }

      @Override
      public void onError(String errorCode, Exception e) {
        Log.w("ExampleApp addEvent", "errorCode: " + errorCode + ", detail: " + e.toString());
      }
    });

    td.uploadEventsWithCallback(new TDCallback() {
      @Override
      public void onSuccess() {
        Log.i("ExampleApp uploadEvents", "success!");
      }

      @Override
      public void onError(String errorCode, Exception e) {
        Log.w("ExampleApp uploadEvents", "errorCode: " + errorCode + ", detail: " + e.toString());
      }
    });

NOTE: IP whitelist won't be applied to any import from Android SDK. Also we've seen a lot of cases where a lot of Android devices have an invalid timestamp (like 1970/01/01), so we're currently ignoring the log which has a timestamp older than 7 days, and newer than 3 days ahead.

### Step 4: Track the App Installation

You can collect the first run event of your application, which can be used to track app `installation` event. `isFirstRun()` and `clearFitstRun()` methods would be useful.

    :::java
    if (TreasureData.sharedInstance().isFirstRun(this)) {
      TreasureData.sharedInstance().addEventWithCallback("demotbl", "first_run", true, new TDCallback() {
        @Override
        public void onSuccess() {
          TreasureData.sharedInstance().clearFirstRun(MainActivity.this);
          TreasureData.sharedInstance().uploadEvents();
        }

        @Override
        public void onError(String errorCode, Exception e) {
          Log.w(TAG, "TreasureData.addEvent:onError errorCode=" + errorCode + ", ex=" + e);
        }
      });
    }

## Next Steps

For transparency, we're open sourcing our iOS SDK on Github. Please check the repository if necessary.

* [https://github.com/treasure-data/td-android-sdk](https://github.com/treasure-data/td-android-sdk)
* [https://github.com/treasure-data/td-android-sdk/tree/master/example](https://github.com/treasure-data/td-android-sdk/tree/master/example)
* [ChangeLog](https://github.com/treasure-data/td-android-sdk/blob/master/ChangeLog)

