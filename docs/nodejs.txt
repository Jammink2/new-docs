# Data Import from Node.js Applications

In order to import data from Node.js applications to Treasure Data, there exists a 3rd party library called '[fluent-logger-node](https://github.com/yssk22/fluent-logger-node)'. This article describes how to use that library.

## Prerequisites

  * Basic knowledge of Node.js, and NPM.
  * Basic knowledge of Treasure Data, including the latest installed version of the toolbelt.
  * An installed version of Node.js 0.6 or higher to test locally

## Install the td-agent

At first, you need to setup `td-agent` on your application servers. `td-agent` is a daemon program dedicated to the continuous upload of any kind of streaming log data. td-agent is developed and maintained by Treasure Data, Inc.

<center><img src="/images/td-agent-app.png" width="90%" /></center><br /><br />

Through [fluent-logger-node](http://github.com/yssk22/fluent-logger-php) library, Node.js applications can post their application logs to local td-agent, and it uploads to the cloud every 5 minutes. Because the daemon runs on a local node, the logging latency is negligible.

Please refer to the following articles in setting up td-agent. For Linux systems, we're providing deb/rpm packages for the easy installation.

<table>
  <tr>
    <th>If you have...</th>
    <th>Please look at...</th>
  </tr>
  <tr>
    <td>Debian / Ubuntu System</td>
    <td><a href="http://treasure-data.tenderapp.com/kb/installing-td-agent-daemon/installing-td-agent-for-debian-and-ubuntu">Installing td-agent for Debian and Ubuntu</a></td>
  </tr>
  <tr>
    <td>Redhat / CentOS System</td>
    <td><a href="http://treasure-data.tenderapp.com/kb/installing-td-agent-daemon/installing-td-agent-for-redhat-and-centos">Installing td-agent for Redhat and CentOS</a></td>
  </tr>
</table>

NOTE: Please note that td-agent is fully open-sourced as the <a href="http://github.com/fluent/">fluentd project</a>. td-agent is a package which contains fluentd and extension plugins for Treasure Data.

## Modify /etc/td-agent/td-agent.conf

We’ll also need to set the `apikey` option, which is a secret key to authenticate our account. Our api key can be shown by `td apikey:show`, as long as we have successfully authenticated our account using the ‘td account’ command.:

    :::term
    $ td apikey:show
    3b7118fd3ad7e35bbd3c0e4f607ec7263aa93c30

Let’s set the `apikey` option in our td-agent.conf file. Please replace *YOUR_API_KEY* to your actual apikey string.

    :::term
    # Treasure Data Input and Output
    <source>
      type forward
      port 24224
    </source>
    <match td.*.*>
      type tdlog
      apikey YOUR_API_KEY
      auto_create_table
      buffer_type file
      buffer_path /var/log/td-agent/buffer/td
    </match>

Once these lines are in place, we’ll restart our agent.

    :::term
    $ sudo /etc/init.d/td-agent restart

We have now enabled td-agent to read, and upload our log data into the cloud via port 24224.

## Use fluent-logger-node

[fluent-logger-node](http://github.com/yssk22/fluent-logger-node) is a Node.js library to post the records to td-agent from a Node.js application. Please find the most recent version from [here](http://search.npmjs.org/#/fluent-logger).

Let's create a sample [Express](http://expressjs.com/) app, which users fluent-logger-node. Here’s an example package.json.

#### package.json

    :::js
    {
      "name": "node-example",
      "version": "0.0.1",
      "dependencies": {
        "express": "2.5.9",
        "fluent-logger": "0.1.0"
      }
    }

Now use *npm* to install your dependencies locally:

    :::term
    $ npm install
    fluent-logger@0.1.0 ./node_modules/fluent-logger
    express@2.5.9 ./node_modules/express
    |-- qs@0.4.2
    |-- mime@1.2.4
    |-- mkdirp@0.3.0
    |-- connect@1.8.6 (formidable@1.0.9)

#### web.js

This is the simplest web app.

    :::js
    var express = require('express');
    var app = express.createServer(express.logger());

    var logger = require('fluent-logger');
    logger.configure('td.test_db', {host: 'localhost', port: 24224});

    app.get('/', function(request, response) {
      logger.emit('follow', {from: 'userA', to: 'userB'});
      response.send('Hello World!');
    });
    var port = process.env.PORT || 3000;
    app.listen(port, function() {
      console.log("Listening on " + port);
    });

Then, let's execute the app and please hit the `http://localhost:3000/` from your browser.

    :::term
    $ node web.js

## Confirm the Import

The posted records are first transferred to the local td-agent. td-agent buffers the records within local disk for a while, and uploads them every 5 minutes.

NOTE: The first argument of post() determines the database name and table name. If you specify `td.test_db.test_table`, the data will be imported into *test_table* table within *test_db* database. Those are automatically created at the upload time.

Rather than waiting 5 minutes, sending SIGUSR1 signal to the agent flushes its buffe,r and it starts uploading immediately.

    :::term
    $ kill -USR1 `cat /var/run/td-agent/td-agent.pid`

To confirm the data upload, please use `td tables`.

    $ td tables
    +------------+------------+------+-----------+
    | Database   | Table      | Type | Count     |
    +------------+------------+------+-----------+
    | test_db    | follow     | log  | 1         |
    +------------+------------+------+-----------+

## Production Deployments

### High-Availablability Configurations of td-agent

For highly loaded sites (more than 5 application nodes), we recommend using high availability configuration for td-agent. This improves the data transfer reliability, and also the query performance.

* [High-Availability Configurations of td-agent](td-agent-high-availability)
