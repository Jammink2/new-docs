# High Availability td-agent Configuration

For high-traffic websites, we recommend using a high availability configuration of `td-agent`. 

## Prerequisites

  * Basic knowledge of Treasure Data, including [the toolbelt](http://toolbelt.treasure-data.com).
  * Basic knowledge of td-agent.

## Message Delivery Semantics

td-agent is designed primarily for event-log delivery systems.

In such systems, several delivery guarantees are possible:

* *At most once*: Messages are immediately transferred. If the transfer succeeds, the message is never sent out again. However, many failure scenarios can cause lost messages (ex: no more write capacity)
* *At least once*: Each message is delivered at least once. In failure cases, messages may be delivered twice.
* *Exactly once*: Each message is delivered once and only once. This is what people want.

If the system "can't lose a single event", and must also transfer "*exactly once*", then the system must stop ingesting events when it runs out of write capacity. The proper approach would be to use synchronous logging and return errors when the event cannot be accepted. 

That's why *td-agent guarantees 'At most once' transfer*. In order to collect massive amounts of data without impacting application performance, a data logger must transfer data asynchronously. Performance improves at the cost of potential delivery failure.

However, most failure scenarios are preventable. The following sections describe how to set up td-agent's topology for high availability.

## Network Topology

To configure td-agent for high availability, we assume that your network consists of '*log forwarders*' and '*log aggregators*'.

<img src="/images/td-agent_ha.png" width="600px">

'*log forwarders*' are typically installed on every node to receive local events. Once an event is received, they forward it to the 'log aggregators' through the network.

'*log aggregators*' are daemons that continuously receive events from the log forwarders. They buffer the events and periodically upload the data into the cloud.

td-agent can act as either a log forwarder or a log aggreagator, depending on its configuration. The next sections describes the setups. We assume that the active log aggregator has ip '192.168.0.1' and that the backup has ip '192.168.0.2'.

## Log Forwarder Configuration

Please add the following lines to the /etc/td-agent/td-agent.conf file for your log forwarders. This will configure your log forwarders to transfer logs to log aggregators.

    :::term
    # TCP input
    <source>
      type forward
      port 24224
    </source>
    
    # HTTP input
    <source>
      type http
      port 8888
    </source>

    # Log Forwarding
    <match td.*.*>
      type forward

      <server>
        host 192.168.0.1
        port 24224
      </server>
    
      # use secondary host
      <server>
        host 192.168.0.2
        port 24224
        standby
      </server>
    
      # use file buffer to buffer events on disks.
      buffer_type file
      buffer_path /var/log/td-agent/buffer/forward
    
      # use longer flush_interval to reduce CPU usage.
      # note that this is a trade-off against latency.
      flush_interval 60s
    </match>

When the active aggregator (192.168.0.1) dies, the logs will instead be sent to the backup aggregator (192.168.0.2). If both servers die, the logs are buffered on-disk at the corresponding forwarder nodes.

## Log Aggregator Configuration

Please add the following lines to the /etc/td-agent/td-agent.conf file for your log aggregators. The input source for the log transfer is TCP.

    :::term
    # TCP input
    <source>
      type forward
      port 24224
    </source>
    
    # Treasure Data output
    <match td.*.*>
      type tdlog
      apikey YOUR_API_KEY_HERE
      auto_create_table
      buffer_type file
      buffer_path /var/log/td-agent/buffer/td
      use_ssl true
    </match>

The incoming logs are buffered, then periodically uploaded into the cloud. If upload fails, the logs are stored on the local disk until the retransmission succeeds.

If you want to write logs to file in addition to TD, please use the 'copy' output. The following code is an example configuration for writing logs to TD, file, and MongoDB simultaneously.

    :::term
    <match td.*.*>
      type copy
      <store>
        type tdlog
        apikey YOUR_API_KEY_HERE
        auto_create_table
        buffer_type file
        buffer_path /var/log/td-agent/buffer/td
        use_ssl true
      </store>
      <store>
        type file
        path /var/log/td-agent/myapp.%Y-%m-%d-%H.log
        localtime
      </store>
      <store>
        type mongo_replset
        database db
        collection logs
        nodes host0:27017,host1:27018,host2:27019
      </store>
    </match>

## Failure Case Scenarios

### Forwarder Failure

When a log forwarder receives events from applications, the events are first written into a disk buffer (specified by buffer_path). After every flush_interval, the buffered data is forwarded to aggregators.

This process is inherently robust against data loss. If a log forwarder's td-agent process dies, the buffered data is properly transferred to its aggregator after it restarts. If the network between forwarders and aggregators breaks, the data transfer is automatically retried. That being said, possible message loss scenarios do exist:

* The process dies immediately after receiving the events, but before writing them into the buffer.
* The forwarder's disk is broken, and the file buffer is lost.

### Aggregator Failure

When log aggregators receive events from log forwarders, the events are first written into a disk buffer (specified by buffer_path). After every flush_interval, the buffered data is uploaded into the cloud.

This process is inherenty robust against data loss. If a log aggregator's td-agent process dies, the data from the log forwarder is properly retransferred after it restarts. If the network between aggregators and the cloud breaks, the data transfer is automatically retried.

That being said, possible message loss scenarios do exist:

* The process dies immediately after receiving the events, but before writing them into the buffer.
* The aggregator's disk is broken, and the file buffer is lost.

## What's Next?

Now you've learned about td-agent's high availability configurations. For further information, please refer to the documents below:

* [Fluentd Documentation](http://fluent.github.com/doc/) (td-agent is open-sourced as `Fluentd`)
* [Fluentd Knowledge Base](http://community.fluentd.org/browse/help-center/)
* [Treasure Data Suppport](http://treasure-data.tenderapp.com/discussions)

td-agent is actively maintained by Treasure Data, Inc. The changelog is available here:

* [td-agent ChangeLog](http://help.treasure-data.com/kb/installing-td-agent-daemon/changelog-of-td-agent)
