# Hive (SQL-style) Query Language

[Treasure Data](http://treasure-data.com/) is a Hadoop-based cloud data warehousing service. We provide a SQL-like query language interface called the Hive query language. This article covers the basics of the Hive query language.

## Prerequisites

  * Basic knowledge of Treasure Data, including [the toolbelt](http://toolbelt.treasure-data.com).

## About Apache Hive

The Hive query language (HiveQL) is the primary data processing method for Treasure Data. HiveQL is powered by [Apache Hive](http://hive.apache.org/).

NOTE: Users can only issue "SELECT" statements. All other types of statements (ex: Data Definition Statements, Data Manipulation Statements, etc.) are currently unavailable.

## Official Documents 

* [The official Hive tutorial](https://cwiki.apache.org/confluence/display/Hive/Tutorial) covers the basics of HiveQL.
* [The official Hive language manual](https://cwiki.apache.org/confluence/display/Hive/LanguageManual) covers all features of HiveQL.

## CLI Usage

You can submit queries by using the `td query` command.

    :::term
    usage:
      $ td query <sql>
    
    example:
      $ td query -d example_db -w -r rset1 "select count(*) from table1"
    
    description:
      Issue a query
    
    options:
      -d, --database DB_NAME           use this database (required)
      -w, --wait                       wait for the job to finish
      -o, --output PATH                write results to this file
      -f, --format FORMAT              write results to file in this format (tsv, csv, json or msgpack)
      -r, --result RESULT_URL          write results to this URL (see also result:create subcommand)
      -u, --user NAME                  set user name for the result URL
      -p, --password                   ask for the password for the result URL
      -P, --priority PRIORITY          set priority

Below is an example query.

    $ td query -w -d testdb \
      "SELECT v['code'], COUNT(1) FROM www_access GROUP BY v['code']"

## Example Queries

Here are some basic examples. The underlying table consists of three fields: `ip`, `url`, and `time`.

#### Number of Records

    :::sql
    SELECT COUNT(1) FROM www_access;

#### Number of Unique IPs

    :::sql
    SELECT COUNT(distinct v['ip']) FROM www_access;

#### Number of Unique IPs that Accessed the Top Page

    :::sql
    SELECT COUNT(distinct v['ip']) FROM www_access \
      WHERE v['url']='/';

#### Number of Accesses per Unique IP

    :::sql
    SELECT v['ip'], COUNT(1) FROM www_access \
      GROUP BY v['ip'] LIMIT 30;

#### Unique IPs Sorted by Number of Accesses

    :::sql
    SELECT v['ip'], COUNT(1) AS cnt FROM www_access \
      GROUP BY v['ip']
      ORDER BY cnt DESC LIMIT 30;

#### Number of Accesses After a Certain Time

[TD_TIME_RANGE UDF](udfs#tdtimerange) is efficient and simple to use. Please refer to the [Performance Tuning](performance-tuning) article for more information.

    :::sql
    SELECT COUNT(1) FROM www_access \
      WHERE TD_TIME_RANGE(time, "2011-08-19", NULL, "PDT")

NOTE: The `time` column is a special column that is always present and stores the UNIX timestamp of the log.

#### Number of Accesses Each Day

    :::sql
    SELECT \
      TD_TIME_FORMAT(time, "yyyy-MM-dd", "PDT") AS day, \
      COUNT(1) AS cnt \
    FROM www_access \
    GROUP BY TD_TIME_FORMAT(time, "yyyy-MM-dd", "PDT")