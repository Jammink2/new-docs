# Supported Presto UDFs (User Defined Functions)

This article lists all the UDFs supported with Presto engine on Treasure Data. Treasure Data supports two types of UDFs: (1) native UDFs supported by Presto and (2) Treasure Data specific functions whose names start with <tt>TD_</tt>.

NOTE: This is a <b>Premium</b> plan feature. Not available for everyone. Please <a href="<%= @env[:url_contact] %>" target="_blank"> contact to us</a>. if you're interested in.

## Presto Native UDFs

All native UDFs on Presto can also be used on Treasure Data. The complete list of UDFs can be found on the [Presto Language Manual's UDF Page](http://prestodb.io/docs/current/functions.html).

## <tt>TD_TIME_RANGE</tt>

#### Signature

    :::terminal
    boolean TD_TIME_RANGE(int/long unix_timestamp,
                          int/long/string start_time,
                          int/long/string end_time
                          [, string default_timezone = 'UTC'])

#### Example

This example selects records with timestamps '2013-01-01 00:00:00 PDT' or later.

    :::sql
    SELECT ... WHERE TD_TIME_RANGE(time, '2013-01-01 PDT')                 # OK
    SELECT ... WHERE TD_TIME_RANGE(time, '2013-01-01', '2013-01-02','PDT') # OK
    SELECT ... WHERE TD_TIME_RANGE(time, NULL, '2013-01-01', 'PDT')        # OK
    SELECT ... WHERE TD_TIME_RANGE(time, '2013-01-01', NULL, 'PDT')        # OK
    SELECT ... WHERE TD_TIME_RANGE(time, '2013-01-01', 'PDT')              # NG

NOTE: Notice that the time of day ('00:00:00') can be omitted, as shown above. Alternately, the time of day can be specified up to seconds. In general, the time string should be formatted as either 'YYYY-MM-DD' or 'YYYY-MM-DD hh:mm:ss', e.g., '2013-01-01' or '1999-01-01 07:00:00'.

NOTE: Currently we cannot use 'NULL' in <tt>TD_TIME_RANGE</tt>.

#### Description

NOTE: We strongly recommend that you take advantage of time-based partitioning. Please refer to the <a href='performance-tuning'>Performance Tuning</a> article for more information.

This UDF returns true if *unix_timestamp* is equal to or later than *start_time* and older than *end_time* (start_time <= time && time < end_time). If *end_time* is omitted or NULL, the UDF assumes it's infinite. If *start_time* is NULL, the UDF assumes it's 0.

*start_time* and *end_time* could be a string which represents a time (e.g. '2012-01-01 00:00:00 +0900') or a UNIX timestamp (e.g. 1325343600). If the format of *start_time* or *end_time* strings is invalid, the UDF returns NULL.

*default_timezone* is used to interpret the timezone of *start_time* or *end_time*. If *start_time* or *end_time* themselves specify a timezone (e.g. '2012-01-01 +0700'), then *default_timezone* is ignored. If *default_timezone* is not specified while *start_time* or *end_time* also does not specify a timezone, then the UDF uses 'UTC' as the timezone for *start_time* or *end_time*. A list of supported time zones can be found [here](https://gist.github.com/4533752).

## <tt>TD_SCHEDULED_TIME</tt>

#### Signature

    :::terminal
    long TD_SCHEDULED_TIME()

#### Description

This UDF returns the exact time when the job was scheduled by the [scheduled query](schedule) feature. The returned value may differ from <tt>NOW()</tt> because the actual query start time may be delayed.

If the query is not a scheduled query, the UDF returns the time when the job was issued. You may use this UDF with <tt>TD_TIME_ADD</tt> for incremental aggregation.

## <tt>TD_TIME_ADD</tt>

#### Signature

    :::terminal
    long TD_TIME_ADD(int/long/string time,
                     string duration
                     [, string default_timezone = 'UTC'])

#### Example

This example selects records with timestamps '2013-01-01 00:00:00 UTC' or later but older than '2013-01-02 00:00:00 UTC'.

    :::sql
    SELECT ... WHERE TD_TIME_RANGE(time,
                                   '2013-01-01',
                                   TD_TIME_ADD('2013-01-01', '1d'))

#### Description

This UDF returns a timestamp equal to *time* offset by *duration*. The UDF supports the following formats for the *duration*:

* 'Nd': after N days (e.g. '1d', '2d', '30d')
* '-Nd': before N days (e.g. '-1d', '-2d', '-30d')
* 'Nh': after N hours (e.g. '1h', '2h', '48h')
* '-Nh': before N hours (e.g. '-1h', '-2h', '-48h')
* 'Nm': after N minutes (e.g. '1m', '2m', '90m')
* '-Nm': before N minutes (e.g. '-1m', '-2m', '-90m')
* 'Ns': after N seconds (e.g. '1s', '2s', '90s')
* '-Ns': before N seconds (e.g. '-1s', '-2s', '-90s')

The formats above can be combined. For example, '1h30m' means 'after 1 hour and 30 minutes'.

*default_timezone* is used to interpret *time*. If *time* itself has timezone (e.g. '2012-01-01 +0700'), then *default_timezone* is ignored. If *default_timezone* is not specified while *time* also does not specify a timezone, then the UDF uses 'UTC' as the timezone for *time*. A list of supported time zones can be found [here](https://gist.github.com/4533752).

If the formats of the *time* or *duration* strings are invalid, the UDF returns NULL.

NOTE: 'year' and 'month' durations are <b>NOT</b> supported, because these have complicated implications. A month can be 28, 29, 30, or 31 days, and a year could be 365 or 366 days. To implement these, this function will become a lot heavier and impact performance.

## <tt>TD_TIME_FORMAT</tt>

#### Signature

    :::terminal
    string TD_TIME_FORMAT(long unix_timestamp,
                          string format
                          [, string timezone = 'UTC'])

#### Example

This example formats a UNIX timestamp into a date formatted string

    :::sql
    SELECT TD_TIME_FORMAT(time, 'yyyy-MM-dd HH:mm:ss z') ... FROM ...
    SELECT TD_TIME_FORMAT(time, 'yyyy-MM-dd HH:mm:ss z', 'PST') ... FROM ...
    SELECT TD_TIME_FORMAT(time, 'yyyy-MM-dd HH:mm:ss z', 'JST') ... FROM ...

#### Description

This UDF converts a UNIX timestamp to a string with the specified format (see [here](udf-time-formats) for available formats). For example, 'yyyy-MM-dd HH:mm:ss z' converts 1325376000 to '2012-01-01 00:00:00 UTC'. If no timezone is specified, the UDF uses UTC.

## <tt>TD_TIME_PARSE</tt>

#### Signature

    :::terminal
    long TD_TIME_PARSE(string time
                       [, string default_timezone = 'UTC'])

#### Description

This UDF converts a time string into a UNIX timestamp.

*default_timezone* is used to interpret *time*. If *time* itself has timezone (e.g. '2012-01-01 +0700'), then *default_timezone* is ignored. If *default_timezone* is not specified while *time* also does not specify a timezone, then the UDF uses 'UTC' as the timezone for *time*. A list of supported time zones can be found [here](https://gist.github.com/4533752).

If the format of the *time* string is invalid, the UDF returns NULL.

## <tt>TD_DATE_TRUNC</tt>

#### Signature

    :::terminal
    long TD_DATE_TRUNC(string unit,
                       long time
                       [, string default_timezone = 'UTC'])

#### Description

This UDF performs a timestamp truncation at the level specified by the 'unit'
parameter. The supported units are:

* 'minute'
* 'hour'
* 'day'
* 'week'
* 'month'
* 'quarter'
* 'year'

An optional 'timezone' parameter can be specified to indicate an alternative
reference timezone the 'unit' is referenced to. While the input 'time' is in
global Unix time format, in different timezones 'day' that is the start of a day
corresponds to different times.

This function mimics the functionality of native
[Presto's <tt>date_trunc</tt>](http://prestodb.io/docs/current/functions/datetime.html)
function, the main difference being that Presto's <tt>date_trunc</tt> does not
allow specification of the timezone, since it uses the sessions' reference
timezone.

#### Example

    :::sql
    SELECT TD_DATE_TRUNC('day', time) FROM tbl

with <tt>time</tt> equal <tt>1416787667</tt> corresponding to '<tt>2014-11-24 00:07:47 UTC</tt>'
will return <tt>1416787200</tt> corresponding to '<tt>2014-11-24 00:00:00 UTC</tt>'.

With the same value and timezone 'PST' instead:

    :::sql
    SELECT TD_DATE_TRUNC('day', time, 'PST') FROM tbl

the function returns <tt>1416758400</tt> since the start of day for the 'PST'
timezone is 8 hours behind the start of day for 'UTC'.

## <tt>TD_SESSIONIZE</tt>

#### Signature

    :::terminal
    string TD_SESSIONIZE(int/long unix_timestamp, int timeout, string sessionize_by)

#### Description

This UDF takes three arguments:

1. The time field specified in [unix epoch](http://en.wikipedia.org/wiki/Unix_time)
2. A timeout window in seconds (when this amount of time elapses, it indicates the start of a new session)
3. The field name to sessionize by

It returns a UUID for the session of the request.

#### Example

You need to 'ORDER BY' the *sessionize_by* field within a sub query to use this feature. The query below sessionizes based on user_id and the timestamp. You may want to use user_id or cookie_id instead of ip_address for non-anonymous logs.

    :::sql
    SELECT TD_SESSIONIZE(time, 3600, ip_address) as session_id, time, ip_address, path
    FROM (
      SELECT time, ip_address, path
      from web_logs
      order by ip_address,time
    ) t

## <tt>TD_PARSE_USER_AGENT</tt>

#### Signature

    :::terminal
    string TD_PARSE_USER_AGENT(user_agent string [, options string])

#### Description

This UDF returns the result of parsing a user agent string. The user agent is parsed by the basis of [rules](https://raw.github.com/tobie/ua-parser/master/regexes.yaml).
Accepts the following options as a string, as user options:

    :::terminal
    os, os_family, os_major, os_minor, ua, ua_family, ua_major, ua_minor, device

os and ua return json. With \_family, \_major and \_minor return a string. The device option also returns a string.

#### Example

The example shows the result of parsing user agent from access log.

    :::sql
    SELECT TD_PARSE_USER_AGENT(agent) AS agent FROM www_access
    > {user_agent: {family: "IE", major: "9", minor: "0", patch: null}, os: {family: "Windows 7", major: null, minor: null, patch: null, patch_minor: null}, device: {family: "Other"}}
    SELECT TD_PARSE_USER_AGENT(agent, 'os') AS agent_os FROM www_access
    > {family: "Windows 7", major: null, minor: null, patch: null, patch_minor: null}
    SELECT TD_PARSE_USER_AGENT(agent, 'os_family') AS agent_os_family FROM www_access
    > Windows 7

## <tt>TD_MD5</tt>

#### Signature

    :::terminal
    string TD_MD5(col)

#### Description

This UDF calculates the [MD5](http://en.wikipedia.org/wiki/MD5) hash digest from a given string.

#### Example

    :::sql
    SELECT TD_MD5(column) FROM tbl

## <tt>TD_URL_DECODE</tt>

#### Signature

    :::terminal
    string TD_URL_DECODE(col)

#### Description

This UDF applies URL decoding for a given string.

#### Example

    :::sql
    SELECT TD_URL_DECODE(column) FROM tbl

## <tt>SMART_DIGEST</tt>

#### Signature

    :::terminal
    string SMART_DIGEST(col [,weight = 1.0])

#### Description

This UDF calculates the variable length digest from a given string. It usually generates 6-10 characters of digest from the given string. Due to the higher compression ratio, there would be higher collision ratio around 5% in average also. So if you're senstive to the collision, please increase the weight.

#### Example

    :::sql
    SELECT SMART_DIGEST(column) FROM tbl
    SELECT SMART_DIGEST(column, 1.5) FROM tbl

## <tt>TD_CURRENCY_CONV</tt>

#### Signature

    :::terminal
    string TD_CURRENCY_CONV(string date, string from_currency, string to_currency, float value)

#### Description

This UDF converts currency for the specific date, by accessing the currency exchange rate database.

- [List of Supported Currencies](http://openexchangerates.org/api/currencies.json)

#### Example

    :::sql
    SELECT TD_CURRENCY_CONV('2015-01-01', 'USD', 'JPY', 1.0)

## <tt>TD_IP_TO_COUNTRY_CODE</tt>

#### Signature

    :::terminal
    string TD_IP_TO_COUNTRY_CODE(string ip)

#### Description

This UDF converts IP address to country code.
This UDF supports IPv4 and IPv6.

#### Example

    :::sql
    SELECT 
        TD_IP_TO_COUNTRY_CODE('106.142.252.8') AS ipv4,
        TD_IP_TO_COUNTRY_CODE('2001:268:d005:f5be:c43e:af35:81f:8f60') AS ipv6

The function returns `JP` in this example.

## <tt>TD_IP_TO_COUNTRY_NAME</tt>

#### Signature

    :::terminal
    string TD_IP_TO_COUNTRY_NAME(string ip)

#### Description

This UDF converts IP address to country code.
This UDF supports IPv4 and IPv6.

#### Example

    :::sql
    SELECT
        TD_IP_TO_COUNTRY_NAME('106.142.252.8') AS ipv4,
        TD_IP_TO_COUNTRY_NAME('2001:268:d005:f5be:c43e:af35:81f:8f60') AS ipv6

The function returns `Japan` in this example.
