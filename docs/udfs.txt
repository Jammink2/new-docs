# Supported Hive UDFs (User Defined Functions)

This article lists all the UDFs supported on Treasure Data. Treasure Data supports two types of UDFs: (1) native UDFs supported by Hive and (2) Treasure Data specific functions whose names start with <tt>TD_</tt>.

## Hive native UDFs

All native UDFs on Hive can also be used on Treasure Data. The complete list of UDFs can be found on the [HiveQL Language Manual's UDF Page](https://cwiki.apache.org/confluence/display/Hive/LanguageManual+UDF).

## <tt>TD_TIME_RANGE</tt>

#### Signature

    :::terminal
    boolean TD_TIME_RANGE(int/long unix_timestamp,
                          int/long/string start_time,
                          int/long/string end_time
                          [, string default_timezone = 'UTC'])

#### Description

NOTE: We strongly recommend that you take advantage of time-based partitioning. Please refer to the <a href="performance-tuning">Performance Tuning</a> article for more information.

This UDF returns true if *unix_timestamp* is equal to or later than *start_time* and older than *end_time* (start_time <= time && time < end_time). If *end_time* is omitted or NULL, the UDF assumes it's infinite. If *start_time* is NULL, the UDF assumes it's 0.

*start_time* and *end_time* could be a string which represents a time (e.g. "2012-01-01 00:00:00 +0900") or a UNIX timestamp (e.g. 1325343600). If the format of *start_time* or *end_time* strings is invalid, the UDF returns NULL.

*default_timezone* is used to interpret the timezone of *start_time* or *end_time*. If *start_time* or *end_time* themselves specify a timezone (e.g. "2012-01-01 +0700"), then *default_timezone* is ignored. If *default_timezone* is not specified while *start_time* or *end_time* also does not specify a timezone, then the UDF uses 'UTC' as the timezone for *start_time* or *end_time*. A list of supported time zones can be found [here](https://gist.github.com/4533752).

#### Example

This example selects records with timestamps "2013-01-01 00:00:00 PDT" or later.

    :::sql
    SELECT ... WHERE TD_TIME_RANGE(time, "2013-01-01 PDT")
    SELECT ... WHERE TD_TIME_RANGE(time, "2013-01-01", NULL, "PDT")

NOTE: Notice that the time of day ("00:00:00") can be omitted, as shown above. Alternately, the time of day can be specified up to seconds. In general, the time string should be formatted as either "YYYY-MM-DD" or "YYYY-MM-DD hh:mm:ss", e.g., "2013-01-01" or "1999-01-01 07:00:00".

## <tt>TD_SCHEDULED_TIME</tt>

#### Signature

    :::terminal
    long TD_SCHEDULED_TIME()

#### Description

This UDF returns the exact time when the job was scheduled by the [scheduled query](schedule) feature. The returned value may differ from NOW() because the actual query start time may be delayed.

If the query is not a scheduled query, the UDF returns the time when the job was issued. You may use this UDF with TD_TIME_ADD for incremental aggregation.

## <tt>TD_TIME_ADD</tt>

#### Signature

    :::terminal
    long TD_TIME_ADD(int/long/string time,
                     string duration
                     [, string default_timezone = 'UTC'])

#### Description

This UDF returns a timestamp equal to *time* offset by *duration*. The UDF supports the following formats for the *duration*:

* "Nd": after N days (e.g. "1d", "2d", "30d")
* "-Nd": before N days (e.g. "-1d", "-2d", "-30d")
* "Nh": after N hours (e.g. "1h", "2h", "48h")
* "-Nh": before N hours (e.g. "-1h", "-2h", "-48h")
* "Nm": after N minutes (e.g. "1m", "2m", "90m")
* "-Nm": before N minutes (e.g. "-1m", "-2m", "-90m")
* "Ns": after N seconds (e.g. "1s", "2s", "90s")
* "-Ns": before N seconds (e.g. "-1s", "-2s", "-90s")

The formats above can be combined. For example, "1h30m" means "after 1 hour and 30 minutes".

*default_timezone* is used to interpret *time*. If *time* itself has timezone (e.g. "2012-01-01 +0700"), then *default_timezone* is ignored. If *default_timezone* is not specified while *time* also does not specify a timezone, then the UDF uses 'UTC' as the timezone for *time*. A list of supported time zones can be found [here](https://gist.github.com/4533752).

If the formats of the *time* or *duration* strings are invalid, the UDF returns NULL.

NOTE: "year" and "month" durations are <b>NOT</b> supported, because these have complicated implications. A month can be 28, 29, 30, or 31 days, and a year could be 365 or 366 days. To implement these, this function will become a lot heavier and impact performance.

#### Example

This example selects records with timestamps "2013-01-01 00:00:00 UTC" or later but older than "2013-01-02 00:00:00 UTC".

    :::sql
    SELECT ... WHERE TD_TIME_RANGE(time,
                                   "2013-01-01",
                                   TD_TIME_ADD("2013-01-01", "1d"))

A typical use of this function within scheduled queries is in conjunction with <tt>TD_TIME_RANGE</tt> and <tt>TD_SCHEDULED_TIME</tt> to
narrow the time range to determined set of days, hours, minutes, or seconds. For example:

    :::sql
    SELECT ... WHERE TD_TIME_RANGE(time,
                                   TD_TIME_ADD(TD_SCHEDULED_TIME(), "-1d"),
                                   TD_SCHEDULED_TIME())

## <tt>TD_TIME_FORMAT</tt>

#### Signature

    :::terminal
    string TD_TIME_FORMAT(long unix_timestamp,
                          string format
                          [, string timezone = 'UTC'])

#### Description

This UDF converts a UNIX timestamp to a string with the specified format (see [here](udf-time-formats) for available formats). For example, "yyyy-MM-dd HH:mm:ss z" converts 1325376000 to "2012-01-01 00:00:00 UTC". If no timezone is specified, the UDF uses UTC.

#### Example

This example formats a UNIX timestamp into a date formatted string

    :::sql
    SELECT TD_TIME_FORMAT(time, "yyyy-MM-dd HH:mm:ss z") ... FROM ...
    SELECT TD_TIME_FORMAT(time, 'yyyy-MM-dd HH:mm:ss z', 'PST') ... FROM ...
    SELECT TD_TIME_FORMAT(time, 'yyyy-MM-dd HH:mm:ss z', 'JST') ... FROM ...

## <tt>TD_TIME_PARSE</tt>

#### Signature

    :::terminal
    long TD_TIME_PARSE(string time
                       [, string default_timezone = 'UTC'])

#### Description

This UDF converts a time string into a UNIX timestamp.

*default_timezone* is used to interpret *time*. If *time* itself has timezone (e.g. "2012-01-01 +0700"), then *default_timezone* is ignored. If *default_timezone* is not specified while *time* also does not specify a timezone, then the UDF uses 'UTC' as the timezone for *time*. A list of supported time zones can be found [here](https://gist.github.com/4533752).

If the format of the *time* string is invalid, the UDF returns NULL.

## <tt>TD_DATE_TRUNC</tt>

#### Signature

    :::terminal
    long TD_DATE_TRUNC(string unit,
                       long time
                       [, string default_timezone = 'UTC'])

#### Description

This UDF performs a timestamp truncation at the level specified by the 'unit'
parameter. The supported units are:

* 'minute'
* 'hour'
* 'day'
* 'week'
* 'month'
* 'quarter'
* 'year'

An optional 'timezone' parameter can be specified to indicate an alternative
reference timezone the 'unit' is referenced to. While the input 'time' is in
global Unix time format, in different timezones 'day' that is the start of a day
corresponds to different times.

This function mimics the functionality of native
[Presto's <tt>date_trunc</tt>](http://prestodb.io/docs/current/functions/datetime.html)
function, the main difference being that Presto's <tt>date_trunc</tt> does not
allow specification of the timezone, since it uses the sessions' reference
timezone.

#### Example

    :::sql
    SELECT TD_DATE_TRUNC('day', time) FROM tbl

with <tt>time</tt> equal <tt>1416787667</tt> corresponding to '<tt>2014-11-24 00:07:47 UTC</tt>'
will return <tt>1416787200</tt> corresponding to '<tt>2014-11-24 00:00:00 UTC</tt>'.

With the same value and timezone 'PST' instead:

    :::sql
    SELECT TD_DATE_TRUNC('day', time, 'PST') FROM tbl

the function returns <tt>1416758400</tt> since the start of day for the 'PST'
timezone is 8 hours behind the start of day for 'UTC'.

## <tt>TD_LAST</tt>

#### Signature

    :::terminal
    TD_LAST(ret_col, cmp_col1, cmp_col2, ...)

#### Description

This aggregate UDF finds the row with the largest value in the 'comparison column' (cmp_col1) and returns that row's 'retrieve column' (ret_col) value. Additional comparison columns (cmp_col2, cmp_col3, etc.) are used as tiebreakers when the preceding comparison column has more than one row with the largest value.

#### Example

This example selects the URL of the most recent access log (the row with the largest time) for each user.

    :::sql
    SELECT user, TD_LAST(url, time) AS last_url FROM access_logs GROUP BY user

## <tt>TD_FIRST</tt>

#### Signature

    :::terminal
    TD_FIRST(ret_col, cmp_col1, cmp_col2, ...)

#### Description

This aggregate UDF finds the row with the smallest value in the 'comparison column' (cmp_col1) and returns that row's 'retrieve column' (ret_col) value. Additional comparison columns (cmp_col2, cmp_col3, etc.) are used as tiebreakers when the preceding comparison column has more than one row with the smallest value.

#### Example

This example selects the referer URL of the earliest access log (the row with the smallest time) for each page_id.

    :::sql
    SELECT page_id, TD_FIRST(referer, time) AS first_referer FROM access_logs GROUP BY page_id

## <tt>TD_X_RANK</tt>

#### Signature

    :::terminal
    long TD_X_RANK(keys)

#### Description

Returns the rank of each row within the partition of the result set. The rank of a row is one plus the number of ranks that come before the row.

#### Example

You need to 'CLUSTER BY' or 'ORDER BY' within a sub query to use this feature. 'CLUSTER BY' is more scalable than 'ORDER BY' because it doesn't require total order across multiple nodes, thus allowing us to process the query in parallel.

    :::sql
    SELECT TD_X_RANK(c), c, u FROM
      (SELECT country AS c, user_id AS u
       FROM users CLUSTER BY c) t

    SELECT TD_X_RANK(c, lc1), c, lc1, u FROM
      (select country AS c, location1 AS lc1, user_id AS u
       FROM users CLUSTER BY c, lc1) t

## <tt>TD_SESSIONIZE</tt>

#### Signature

    :::terminal
    string TD_SESSIONIZE(int/long unix_timestamp, int timeout, string sessionize_by)

#### Description

This UDF takes three arguments:

1. The time field specified in [unix epoch](http://en.wikipedia.org/wiki/Unix_time)
2. A timeout window in seconds (when this amount of time elapses, it indicates the start of a new session)
3. The field name to sessionize by

It returns a UUID for the session of the request.

#### Example

Similiar to <tt>TD_X_RANK</tt>, you need to 'CLUSTER BY' or 'DISTRIBUTE BY' the *sessionize_by* field, and sort by the *unix_timestamp* field. The query below sessionizes based on user_id and the timestamp. You may want to use user_id or cookie_id instead of ip_address for non-anonymous logs.

    :::sql
    SELECT TD_SESSIONIZE(time, 3600, ip_address) as session_id, time, ip_address, path
    FROM (
      SELECT time, ip_address, path
      from web_logs
      distribute by ip_address
      sort by ip_address,time
    ) t

## <tt>TD_PARSE_USER_AGENT</tt>

#### Signature

    :::terminal
    string TD_PARSE_USER_AGENT(user_agent string [, options string])

#### Description

This UDF returns the result of parsing a user agent string. The user agent is parsed by the basis of [rules](https://raw.github.com/tobie/ua-parser/master/regexes.yaml).
Accepts the following options as a string, as user options:

    :::terminal
    os, os_family, os_major, os_minor, ua, ua_family, ua_major, ua_minor, device

os and ua return json. With \_family, \_major and \_minor return a string. The device option also returns a string.

#### Example

The example shows the result of parsing user agent from access log.

    :::sql
    SELECT TD_PARSE_USER_AGENT(agent) AS agent FROM www_access
    > {user_agent: {family: "IE", major: "9", minor: "0", patch: null}, os: {family: "Windows 7", major: null, minor: null, patch: null, patch_minor: null}, device: {family: "Other"}}
    SELECT TD_PARSE_USER_AGENT(agent, 'os') AS agent_os FROM www_access
    > {family: "Windows 7", major: null, minor: null, patch: null, patch_minor: null}
    SELECT TD_PARSE_USER_AGENT(agent, 'os_family') AS agent_os_family FROM www_access
    > Windows 7

## <tt>TD_MD5()</tt>

#### Signature

    :::terminal
    string TD_MD5(col)

#### Description

This UDF calculates the [MD5](http://en.wikipedia.org/wiki/MD5) hash digest from a given string.

#### Example

    :::sql
    SELECT TD_MD5(column) FROM tbl

## <tt>TD_URL_DECODE()</tt>

#### Signature

    :::terminal
    string TD_URL_DECODE(col)

#### Description

This UDF applies URL decoding for a given string.

#### Example

    :::sql
    SELECT TD_URL_DECODE(column) FROM tbl

## <tt>Hivemall</tt>

Treasure Data bundles [Hivemall](https://github.com/myui/hivemall), the scalable machine learning library for Hive.
If you want to see Hivemall version, please use the following query.

    :::sql
    SELECT hivemall_version()

