# Impala Query (Alpha Version)

[Treasure Data](http://treasure-data.com/) is a Hadoop-based Big Data analytics platform. Treasure Data supports Impala, which enables low-latency queries to the data. This feature is currently an alpha release.

## What is Impala?

[Impala](http://github.com/cloudera/impala) is an open-source parallel query execution engine. Unlike Hive, Impala avoids latency by NOT using MapReduce. Instead, Impala directly accesses the data through a specialized distributed query engine that is very similar to those found in commercial parallel RDBMSs.

<center><img src="http://blog.cloudera.com/blog/wp-content/uploads/2012/10/impala.png" width="80%" /></center>

Treasure Data has customized Impala to talk directly with our distributed columnar storage layer. As a result, the end user experience is nearly identical to Impala itself.

## Does Impala Replace Hive?

**No**. Hive is designed for batch processing, while Impala is designed for short interactive queries useful for data exploration.

Impala currently doesn't support fault tolerance within a query. If a node fails while processing, the whole query must be re-run. On the other hand, it executes queries 10-50x faster than Hive. Thus, even if a node fails and a query execution must be restarted, the total runtime will often beat Hive significantly. 

Another caveat is that Impala has limited support for caching to disk. So if a particularly large data set causes Impala's processor to run out of memory, it will cause the query execution to fail.

Even with Impala on the scene, MapReduce and Hive will continue to have many viable use cases (ex: long-running data transformation workloads).

## How to Use Impala?

Please specify `-T impala` in the `td query` command. A v0.10.85 or newer client is required.

    :::term
    $ td query -w -T impala -d testdb \
      "SELECT code, COUNT(1) FROM www_access GROUP BY code"

For REST API, the endpoint is `/v3/job/issue/impala/:database`.

## Impala SQL Language Reference

* [Impala SQL Language Reference](http://www.cloudera.com/content/cloudera-content/cloudera-docs/Impala/latest/Installing-and-Using-Impala/ciiu_langref.html)
  * [Impala SQL Language Elements](http://www.cloudera.com/content/cloudera-content/cloudera-docs/Impala/latest/Installing-and-Using-Impala/ciiu_langref_sql.html)
  * [Built-in Function Support](http://www.cloudera.com/content/cloudera-content/cloudera-docs/Impala/latest/Installing-and-Using-Impala/ciiu_functions.html)

## Known Limitations

We're currently in the alpha stages of Impala availablity. Naturally, there are some limitations compared to Hive at this point. These will be improved in the future.

### Lack of SQL features

Please check the [Unsupported Language Elements](http://www.cloudera.com/content/cloudera-content/cloudera-docs/Impala/latest/Installing-and-Using-Impala/ciiu_langref_unsupported.html) page for information on unsupported SQL features.

### Lack of UDFs

A lot of Hive UDFs are currently NOT available for Impala. This will be resolved at the end of 2013.

The available UDFs are as follows:

* [TD_TIME_FORMAT](http://docs.treasuredata.com/articles/udfs#tdtimeformat)
* [TD_TIME_RANGE](http://docs.treasuredata.com/articles/udfs#tdtimerange)
* [TD_TIME_PARSE](http://docs.treasuredata.com/articles/udfs#tdtimeparse)

### Lack of Complex Types

`map`, `array`, and `struct` are currently not available.

### JOIN Order

Impala currently does not support cost-based JOIN optimizations or disk-based JOINs. We must unfortunately ask you to be careful about you manual JOINs. As of now, the right-hand side of the table must fit in memory. Otherwise, the query will fail.

    :::sql
    SELECT
      ...
    FROM
      large_table
    JOIN
      small_table

### Schemas Are Required

You must set [Schema](schema)s onto the table when querying via Impala. `v` doesn't work, because Impala doesn't have the map type yet.

### Limited Time-based Partitioning Capabilities

For [Performance Tuning](performance-tuning), the queries can leverage time-based partitioning of data. While Hive supports many UDFs such as TD_TIME_ADD, Impala does not support some of these yet. Also, please avoid using TD_TIME_PARSE in the WHERE clause for the performance.

    :::sql
    [GOOD]: SELECT field1 FROM tbl WHERE time > 1349393020
    [GOOD]: SELECT field1 FROM tbl WHERE time > 1349393020 + 3600
    [GOOD]: SELECT field1 FROM tbl WHERE time > 1349393020 - 3600
    [GOOD]: SELECT field1 FROM tbl WHERE TD_TIME_RANGE(time, "2013-01-01 PDT")
    [BAD]:  SELECT field1 FROM tbl WHERE time > 1349393020.00
    [BAD]:  SELECT field1 FROM tbl WHERE time > TD_TIME_PARSE("2013-01-01")

### Scheduled Queries Are Not Supported

We currently do not support scheduled queries for Impala.

## See Also

* [Cloudera Impala Documentation](http://www.cloudera.com/content/support/en/documentation/cloudera-impala/cloudera-impala-documentation-v1-latest.html)
* [Cloudera Impala: Real-Time Queries in Apache Hadoop, For Real](http://blog.cloudera.com/blog/2012/10/cloudera-impala-real-time-queries-in-apache-hadoop-for-real/)
