# Treasure Data Toolbelt: Command-line Interface

The Treasure Data CLI (or Toolbelt) allows you to create databases and tables, [import](bulk-import)/[export](bulk-export) data into/from the tables, set and modify the table schema, issue queries, monitor job status, view and download job results, create schedule queries, and much more.


## Step 1: Installation

Install the [Treasure Data Toolbelt](http://toolbelt.treasuredata.com/) to set up your local workstation with `td`, the Treasure Data command-line client.

- [Toolbelt Installer for Windows](http://toolbelt.treasuredata.com/win)
- [Toolbelt Installer for Mac OS X](http://toolbelt.treasuredata.com/mac)
- [Toolbelt Installer for Linux](http://toolbelt.treasuredata.com/linux)

## Step 2: Authorize

Once you have installed the toolbelt, you will have access to the `td` command from your command line. Authorize your account with the `td account` command. Please use the user name and password you used when signing up when prompted.

    :::term
    $ td account -f
    Enter your Treasure Data credentials.
    Email: k@treasure-data.com
    Password (typing will be hidden):
    Authenticated successfully.


## Step 3: Query the Sample Dataset

Letâ€™s issue a SQL query. Out of the box, we have a table called www_access in the dabase called sample_db. The following query calculates the distribution of HTTP status codes.

    :::term
    $ td query -w -d sample_db \
      "SELECT code, COUNT(1) AS cnt FROM www_access GROUP BY code"
    queued...
    started at 2012-04-10T23:44:41Z
    2012-04-10 23:43:12,692 Stage-1 map = 0%,  reduce = 0%
    2012-04-10 23:43:18,766 Stage-1 map = 100%,  reduce = 0%
    2012-04-10 23:43:29,925 Stage-1 map = 100%,  reduce = 33%
    2012-04-10 23:43:32,973 Stage-1 map = 100%,  reduce = 100%
    Status     : success
    Result     :
    +------+------+
    | code | cnt  |
    +------+------+
    | 404  | 17   |
    | 500  | 2    |
    | 200  | 4981 |
    +------+------+

The command above will take about 15-45 seconds, owing mainly to the overhead in setting up jobs within the cloud-based MapReduce engine.


## Step 4: Import Data Into A Table

You're now ready to import **your real data** to the cloud! The following tutorials will explain how to import your data (e.g. Application Logs, Middleware Logs) from various sources. For a deeper understanding of the platform, please refer to the [architecture overview article](architecture-overview).

### CLI

This example shows how to use the CLI to generate a sample apache log in json format and import it into a brand new table in the 'sample_db' database.

    :::term
    $ td sample:apache sample_apache.json
    $ td table:import sample_db sample_tbl \
      --auto-create-table -f json sample_apache.json

### Languages and Frameworks
<table>
  <tr>
    <th colspan="3">Supported Languages</th>
    <tr>
      <td style="text-align: left; width: 33%;"><a href="ruby">Ruby</a> or <a href="rails">Rails</a></td>
      <td style="text-align: left;"><a href="java">Java</a></td>
      <td style="text-align: left;"><a href="perl">Perl</a></td>
    </tr>
    <tr>
      <td style="text-align: left; width: 33%;"><a href="python">Python</a></td>
      <td style="text-align: left;"><a href="php">PHP</a></td>
      <td style="text-align: left;"><a href="scala">Scala</a></td>
    </tr>
    <tr>
      <td style="text-align: left;"><a href="nodejs">Node.js</a></td>
    </tr>
  </tr>
</table>

### Middleware
* [Apache Logs](analyzing-apache-logs)
* [Tailing Existing CSV or TSV Logs](td-agent-tail)


## Upgrading

Depending on how the CLI was originally installed on your machine, there are different way it gets updated or can be updated.


### Installed as Toolbelt on MACOSX or Windows

Whether you downloaded the CLI as a Toolbelt installer package (.pkg file) for Mac OSX or as a Toolbelt installer executable for Windows (64 bit support only) from the [Treasure Data Toolbelt](http://toolbelt.treasuredata.com/) website and installed it on a MACOSX machine, the Toolbelt CLI is enabled with ability to self update itself.

Whenever a command is invoked from the CLI, the program will check whether a more updated version exists: if so it will download the updated version and install it in the background. The CLI will check for an updated version every hour. The user can at any time trigger an auto update with the following command:

    :::term
    $ td update

The auto update feature is available as of v0.10.77. If you are running an earlier version (please check the version with the `td --version` command) please upgrade as soon as possbile by installing a more recent package from [Treasure Data Toolbelt](http://toolbelt.treasuredata.com/).

### Installed as a Gem

If you installed the CLI as a gem (whether on Linux, Windows, or Mac OSX) through:

    :::term
    $ gem install td

you will need to periodically check whether a newer version exists. It is always reccomended to update to the latest version since we strive to maintain 100% backwards compatibilty. To update using the gem command run:

    :::term
    $ gem update td

NOTE: If are using a ruby environment manager such as `rbevn` or `rvm`, different versions of the td CLI may be confined within each environment/ruby version in use.<br/>
You will need to ensure each version and environment is updated independently.

### Installed with td-agent

The easier way of installing the td CLI in a Linux environment beside using a gem (see above) is to install td as part of the `td-agent` distribution package. Several Linux environments are supported, see [Installing the Treasure Data CLI](installing-the-cli) documentation page.

The Treasure Agent environment provisions its own gem environemnt and the corresponding gem command is accessible in this location `/usr/lib*/fluent/ruby/bin/fluent-gem`. To update the td CLI to the latest version without having to wait until the next `td-agent` release", please run:

    :::term
    $ /usr/lib*/fluent/ruby/bin/fluent-gem update td


## Additional Help

Running `td help:all` shows the commands available in Treasure Data:

    :::term
    $ td help:all

      database:list             # Show list of tables in a database
      database:show <db>        # Describe a information of a database
      database:create <db>      # Create a database
      database:delete <db>      # Delete a database

      ....

If you want more information about individual commands, you can run `td help <command>:<subcommand>`, e.g.,

    :::term
    $ td help table:list
    usage:
      $ td table:list [db]

    example:
      $ td table:list
      $ td table:list example_db
      $ td tables

    description:
      Show list of tables

    options:
      -n, --num_threads VAL            number of threads to get list in parallel
          --show-bytes                 show estimated table size in bytes

See the [td command line tool reference](td-cli) page for a complete list of commands and their helpers.
