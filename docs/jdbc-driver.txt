# Treasure Data JDBC Driver

This article covers how to use Treasure Data's [JDBC](http://en.wikipedia.org/wiki/Java_Database_Connectivity) (Java Database Connectivity) driver. This driver enables you to use Treasure Data with a standard JDBC interface.

## Download

You can download the driver itself from the link below. The driver is still in beta; any feedback is appreciated.

* [JDBC Driver Download](http://toolbelt.treasure-data.com/jdbc) (2012/10/10 v0.1.6)

NOTE: This driver only works with Treasure Data. It does not run on other environments, such as your local Hadoop/Hive cluster.

## Query Execution Internals

Because Treasure Data is a cloud service, its JDBC driver behaves in a slightly different manner compared to that of traditional RDBMs.

#### SELECT Statement

When a SELECT statement is sent to the driver, the driver will issue the query to the cloud. The driver will regularly poll the job results while the jobs run on the cloud. The query may take several hours, we recommend that you use a background thread.

#### INSERT Statement

When a INSERT statement is sent to the driver, the data is first buffered in local memory. The data is uploaded into the cloud every 5 minutes. Please note that the upload doesn't occur in realtime.

## Sample Java Program

Here's a sample Java program that executes a SELECT statement. This program counts the number of records within the testdb.www_access table.

### JDBCSample.java

    :::java
    import java.io.IOException;
    import java.sql.Connection;
    import java.sql.DriverManager;
    import java.sql.ResultSet;
    import java.sql.Statement;
    import java.util.Properties;
    import com.treasure_data.jdbc.TreasureDataDriver;
    
    public class JDBCSample {
      public static void loadSystemProperties() throws IOException {
        Properties props = System.getProperties();
        props.load(TreasureDataDriver.class.getClassLoader().getResourceAsStream("treasure-data.properties"));
      }
    
      public static void main(String[] args) throws Exception {
        loadSystemProperties();
        try {
          Class.forName("com.treasure_data.jdbc.TreasureDataDriver");
        } catch (ClassNotFoundException e) {
          e.printStackTrace();
          System.exit(1);
        }
    
        Connection conn = DriverManager.getConnection(
          "jdbc:td://api.treasure-data.com/testdb",
          "YOUR_MAIL_ADDRESS_HERE",
          "YOUR_PASSWORD_HERE");
        Statement stmt = conn.createStatement();
        String sql = "SELECT count(1) FROM www_access";
        System.out.println("Running: " + sql);
        ResultSet res = stmt.executeQuery(sql);
        while (res.next()) {
          System.out.println(String.valueOf(res.getObject(1)));
        }
      }
    }

### treasure-data.properties

If you use SELECT statement only, you don't need this file. This is required only for INSERT statement.

    :::text
    td.logger.agentmode=false
    td.api.key=<your API key>
