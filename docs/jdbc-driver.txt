# Treasure Data JDBC Driver

This guide covers how to use [JDBC](http://en.wikipedia.org/wiki/Java_Database_Connectivity) (Java Database Connectivity) driver for Treasure Data. By using this driver, you can operate on Treasure Data with a standard JDBC interface.

## About JDBC

Java Database Connectivity (JDBC) is an API for the Java programming language that defines how a client may access a database. It provides methods for querying and updating data in a database. JDBC is oriented towards relational databases.

The Treasure Data JDBC driver is commonly used to allow application programs, such as those written in Java, to retrieve data directly from Treasure Data Cloud Data Warahousing Service. Some reporting tools also utilize JDBC for data connectivity.

## Download

You can download the driver itself from here. The driver is still in beta quality, so please report to us if you have any problems.

* 2012/06/04: [td-jdbc-0.1.1-jar-with-dependencies.jar](https://s3-us-west-1.amazonaws.com/td-jdbc/td-jdbc-0.1.1-jar-with-dependencies.jar)

NOTE: This driver works only with Treasure Data, doesn't work with other environments like your local Hadoop/Hive cluster.

## Connect to Treasure Data

With JDBC, you can establish connection with a database using a URL. For the Treasure Data driver, you can specify the URL by this format:

* `jdbc:td://api.treasure-data.com/<database>`

Also, the class name of the driver is:

* `com.treasure_data.jdbc.TreasureDataDriver`

## Sample Java Program

Here's a sample Java program, which executes the SELECT query. This counts the number of records within testdb.www_access. To run the program, please add the downloaded jar file to your CLASSPATH.

### JDBCSample.java

    :::java
    import java.io.IOException;
    import java.sql.Connection;
    import java.sql.DriverManager;
    import java.sql.ResultSet;
    import java.sql.Statement;
    import java.util.Properties;
    import com.treasure_data.jdbc.TestTreasureDataDriver;
    
    public class JDBCSample {
      public static void loadSystemProperties() throws IOException {
        Properties props = System.getProperties();
        props.load(TestTreasureDataDriver.class.getClassLoader().getResourceAsStream("treasure-data.properties"));
      }
    
      public static void main(String[] args) throws Exception {
        loadSystemProperties();
        try {
          Class.forName("com.treasure_data.jdbc.TreasureDataDriver");
        } catch (ClassNotFoundException e) {
          e.printStackTrace();
          System.exit(1);
        }
    
        Connection conn = DriverManager.getConnection(
          "jdbc:td://api.treasure-data.com/testdb",
          "YOUR_MAIL_ADDRESS_HERE",
          "YOUR_PASSWORD_HERE");
        Statement stmt = conn.createStatement();
        String sql = "SELECT count(1) FROM www_access";
        System.out.println("Running: " + sql);
        ResultSet res = stmt.executeQuery(sql);
        while (res.next()) {
          System.out.println(String.valueOf(res.getObject(1)));
        }
      }
    }

### treasure-data.properties

    :::text
    td.logger.agentmode=false
    td.api.key=<your API key>

## Query Execution Internals

Because Treasure Data is a cloud service, the behavior of JDBC driver is slightly different from those for the traditional RDBMs.

#### SELECT Query

If the driver receives SELECT query, it's issued into the cloud. While running the jobs on the cloud, the driver *keeps polling* the job results. This might take several hours, so using background thread is recommended.

#### INSERT Query

If the driver receives INSERT query, the data is first buffered into the local memory. Those are uploaded into the cloud every 5 minutes. Please be careful that the upload doesn't occur in realtime.

