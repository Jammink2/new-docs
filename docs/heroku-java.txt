# Java Apps on Heroku

## Prerequisites

  * Basic knowledge of Java
  * Basic knowledge of Heroku, including the Heroku toolbelt.
  * Java 1.6 or higher.

## Data Import

### Step 1: Add the td-logger Library

First, you need to install [the td-logger library](https://github.com/treasure-data/td-logger-java). All-in-one jar, Maven2, and custom-build are supported. Below is an example Maven2 pom.xml file. This [README](https://github.com/treasure-data/td-logger-java/blob/master/README.md) describes the other two methods of installation.

    :::xml
    <dependencies>
      ...
      <dependency>
        <groupId>com.treasure_data</groupId>
        <artifactId>td-logger</artifactId>
        <version>0.1.3</version>
      </dependency>
      ...
    </dependencies>
    <repositories>
      <repository>
        <id>treasure-data.com</id>
        <name>Treasure Data's Maven2 Repository</name>
        <url>http://treasure-data.com/maven2</url>
      </repository>
      <repository>
        <id>fluentd.org</id>
        <name>Fluentd's Maven2 Repository</name>
        <url>http://fluentd.org/maven2</url>
      </repository>
    </repositories>

Let's write some code to start logging from your application. You can find more information about the logger API here.

    :::java
    import com.treasure_data.logger.TreasureDataLogger;
    public class Main {
      private static TreasureDataLogger LOG;
      static {
        try {
          Properties props = System.getProperties();
          props.load(Main.class.getClassLoader().getResourceAsStream("treasure-data.properties"));
          LOG = TreasureDataLogger.getLogger("sample_database");
        } catch (IOException e) {
          // error handling here
        }
      }
      public void doApp() {
        Map<String, Object> data = new HashMap<String, Object>();
        data.put("from", "userA");
        data.put("to", "userB");
        LOG.log("follow", data);
      }
    }

That's it. You are now ready to deploy your change.

    :::term
    $ git commit -a -m "Added Treasure Data Plugin"
    $ git push heroku master

### Step 2: Access Your Application

First, open your application on Heroku. The recorded events are first buffered locally, then periodically uploaded into the cloud. In the current implementation, the buffered data is uploaded every 5 minutes.

    :::term
    $ heroku open

### Step 3: Check Your Uploaded Data

#### Database Structure

Treasure Data Hadoop structures its data much like RDBMS: tables inside databases. In order to see the list of available databases, use the command: `heroku td dbs`.

    :::term
    $ heroku td dbs
    +------------------+
    | Name             |
    +------------------+
    | sample_database |
    +------------------+
    1 row in set

#### Checking Your Data

In order to see the tables inside the available databases, use the command: `heroku td tables`.

    :::term
    $ heroku td tables
    +------------------+--------+------+-------+--------+
    | Database         | Table  | Type | Count | Schema |
    +------------------+--------+------+-------+--------+
    | sample_database  | follow | log  | 1     |        |
    | sample_database  | pay    | log  | 7     |        |
    +------------------+--------+------+-------+--------+
    2 rows in set

To confirm that your application data has been uploaded properly, check the "Count" column. If any of the "Count" entries are non-zero, your event logs been transferred successfully.

If your data has been uploaded properly, then use the `heroku td table:tail` command to see the recent entries of a specific table.

    :::term
    $ heroku td table:tail sample_database follow
    {"action":"follow","uid":12345,"from":"TreasureData","to":"heroku","time":1320857514}

### Step 4: Analyze Your Data

You can analyze your data with a Hive-compatible query language. (When your data is sent to us, your logs are imported into a Hadoop/Hive cluster.)

Use the `heroku td query` command to write queries to Treasure Data Hadoop; Treasure Data Hadoop accepts and executes queries on the cloud.

The example query below counts the number of "follow" actions that were generated by user id 12345:

    :::term
    $ heroku td query -w -d sample_database \
      "SELECT COUNT(1) FROM follow WHERE v['uid']=12345"
    +---+
    | 0 |
    +---+
    | 1 |
    +---+
    1 row in set

The next example query counts the total number of logged actions for each day.

    :::term
    $ heroku td query -w -d sample_database \
      "SELECT to_date(from_unixtime(time)) AS day, count(1) \
      FROM follow GROUP BY to_date(from_unixtime(time)) ORDER BY day"
    +------------+----+
    | 0          | 1  |
    +------------+----+
    | 2011-11-09 | 1  |
    +------------+----+
    1 row in set

The `heroku td query â€“format csv` command outputs the results in csv.

## Development Environment Setup

In order to use Treasure Data Hadoop, you must set `TREASURE_DATA_API_KEY` env variable.

    :::term
    $ export TREASURE_DATA_API_KEY=`heroku td apikey:show`

Then, start your application as usual.

## Does Upload Impact App Performance?

The performance impact should be negligible. The td-logger library buffers data locally, and a separate, dedicated thread uploads the data to the cloud asynchronously.

Note that if the buffer fills up, the data upload starts right away. The buffer size is configurable.

## Next Step

We have outlined [some caveats](/articles/heroku-notes) on using Treasure Data Hadoop addon. Also, you might want to consult [this article](/articles/schema) to learn more about our schema management. We also have a [little write-up](/articles/hive) on our SQL-like, Hive-compataible language.

For further assistance, please consult our support forum.

* [Treasure Data Discussion Forum](http://help.treasure-data.com/)
