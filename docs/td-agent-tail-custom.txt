# Tailing Custom-Formatted Logs

If your logs are in a custom format, you will need to write a custom parser [(instructions)](http://docs.fluentd.org/articles/plugin-development#customizing-the-tail-input-plugin-parser). Once you have written the parser, please put the file into your */etc/td-agent/plugins/* directory.

We provide two example parsers: "URL-param style key-value pairs" and "ascii character delimited format". Both formats are fairly common among our users.

    :::terminal
    # URL-param style key-value pairs
    last_name=smith&first_name=brian&age=22&state=CA
    
    # ASCII character delimited format. In this case, the delimiter is '|'.
    # There is usually a separate file that annotates the column names
    smith|brian|22|CA 

* [Custom Parser for URL-Param Style Key-Value Pairs](https://gist.github.com/2565478)
* [Custom Parser for Ascii-Character Delimited Logs](https://gist.github.com/2565493)

NOTE: Tailing existing logs is by far the easiest way to get started with Treasure Data. We recommend logging everything as JSON. <a href="http://blog.treasure-data.com/post/21881575472/log-everything-as-json-make-your-life-easier">Here's why</a>.

## Filtering Out the Records

If you need to filter logs (ex: filtering out impressions and just keeping clicks), <a href="//docs.fluentd.org/articles/out_exec_filter">the exec-filter plugin</a> is useful. This plugin launches another script which takes STDIN as input and STDOUT as output, and filters logs accordingly.

Here's an example configuration.

    :::text
    <source>
      type tail
      path /path/to/the/file1
      tag filter
      format json
      pos_file /var/log/td-agent/file1.pos
    </source>
    
    <match filter>
      type exec_filter
      command /usr/lib64/fluent/ruby/bin/ruby /etc/td-agent/filter.rb
      in_format json  # takes a JSON string from STDIN
      out_format json # generates a JSON string to STDOUT
      tag_key tag     # The key for tags is "tag".
      time_key time   # The key for timestamps is "time".
    </match>
    
    <match td.*.*>
      type tdlog
      endpoint <%= @env[:api_endpoint] %>
      apikey ...
      auto_create_table
      buffer_type file
      buffer_path /var/log/td-agent/buffer/td
      use_ssl true
    </match>

`/etc/td-agent/filter.rb` is the filter script (shown below). It filters out all the lines where the field "field0" is equal to "certain_value". Errors are recorded in `/var/log/td-agent/filter.rb.log`.

    :::ruby
    open('/var/log/td-agent/filter.rb.log', 'a') { |f|
      f.puts "-- begin --"
      begin
        require 'json'
        STDOUT.sync = true
        while line = STDIN.gets
          # parse
          begin
            h = JSON.parse line
          rescue => e
            next # broken line
          end
          # filter
          # next if h["field0"] == "certain_value"
          # emit
          h['tag'] = 'td.testdb.test_table'
          puts h.to_json
        end
      rescue LoadError => e
        f.puts e.to_s
      end
    }
