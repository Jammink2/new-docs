# Using Ruby Binding of REST API

This article will explain how to use Ruby binding for REST API.

## Install

That's contained within `td` (stands for ‘T’reasure ‘D’ata) gem. Please add the following line to your Gemfile. The source code is [available at github](https://github.com/treasure-data/td-client-ruby).

    :::ruby
    gem 'td', "~> 0.10.22"

## List Databases and Tables

Below is an example of listing databases and tables.

    :::ruby
    require 'td'
    require 'td-client'
    cln = TreasureData::Client.new(ENV['TREASURE_DATA_API_KEY'])
    cln.databases.each { |db|
      db.tables.each { |tbl|
        p tbl.db_name
        p tbl.table_name
        p tbl.count
      }
    }

## Issue Queries

Below is an example of issuing a query from a Ruby program. The query API is asynchronous, and you can wait for the query to complete by polling the job periodically (e.g. by issuing job.finished? calls).

    :::ruby
    require 'td'
    require 'td-client'
    cln = TreasureData::Client.new(ENV['TREASURE_DATA_API_KEY'])
    job = cln.query('testdb', 'SELECT COUNT(1) FROM www_access')
    until job.finished?
      sleep 2
      job.update_status!
    end
    job.result_each { |row| p row } job.success?

NOTE: job.result_each(&block) doesn't put the job result into the memory. It iterates the rows in a streaming fashion.

## List and Get the Status of Jobs

Below is an example of listing and get the status of jobs.

    :::ruby
    require 'td'
    require 'td-client'
    cln = TreasureData::Client.new(ENV['TREASURE_DATA_API_KEY'])
    
    # recent 20 jobs
    cln.jobs.length
    
    # recent 127 jobs of specific status
    cln.jobs(0, 127, 'running')
    cln.jobs(0, 127, 'success')
    cln.jobs(0, 127, 'error')
    cln.jobs(0, 127, 'killed')
    
    # get job status
    cln.job job_id
    
    # get job result
    cln.job_result job_id
