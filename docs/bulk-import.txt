# Bulk Import

This guide explains how to bulk-import data with the 'td' command.

## Prerequisites

  * Basic knowledge of Treasure Data, including the latest installed version of the toolbelt.

## Use Cases

Bulk import is primarily used in two ways.

#### First Data Upload

The first use case is when we first upload our data to Treasure Data Cloud. Bulk-import is useful if we already have data on hand and want to import it to Treasure Data Cloud.

#### Periodic Data Upload

The second use case is when we want to periodically import our data into the cloud. Let's suppose that our logs are rotated every hour. In this case, it makes sense to periodically launch the bulk-import tool to import the previous hour's data.

But for this use case, it is better to continuously upload data using 'td-agent'. For further information, please refer to [Continuous Data Import with td-agent](td-agent).

## The *td import* Command

The import sub-command in 'td' is used for bulk importing. The command takes the file path and format as arguments, and uploads the data into the cloud. It currently supports the following formats.

### JSON

In order to use JSON, the files should be formatted as follows:

1. One JSON-map per line. 
2. A 'time' field is required. This field indicates the time in which the event was generated.

    :::term
    {"action":"login","user":2,"time":"2011-08-02 03:06:32 +0900"}
    {"action":"login","user":4,"time":"2011-08-02 03:06:32 +0900"}
    {"action":"login","user":0,"time":"2011-08-02 03:06:32 +0900"}
    ...

We can import our data into the 'test_table' table within our 'test_db' database as follows.

    :::term
    $ td import test_db test_table \
      --format json \
      --time-key time \
      file1.json file2.json

### Apache Log

The *td import* command can also parse Apache Logs stored in the 'combined' format. The command automatically splits the log records into meaningful fields (ex: time, user-agent, etc.) and imports the data into the cloud.

    :::term
    $ td import test_db test_table --format apache access_log.txt

### Syslog

The *td import* command can also parse logs stored in the 'syslog' format.

    :::term
    $ td import test_db test_table --format syslog syslog.txt
