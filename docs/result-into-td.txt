# Writing the Query Results into your TD Table.

This article explains how to write job results to your Treasure Data (TD) table.

## Prerequisites

  * Basic knowledge of Treasure Data, including the [toolbelt](http://toolbelt.treasuredata.com).

## Basic Usage

<center><img src="/images/result_td.png" height="300px" /></center><br /><br />

### For On-demand Jobs

For on-demand jobs, just add the `--result` option to the `td query` command. Once the job is finished, the results are written into `output_table` within the `testdb` database.

    :::sql
    $ td query --result 'td://@/testdb/output_table' \
      -w -d testdb \
      "SELECT v['code'], COUNT(1) FROM www_access GROUP BY v['code']"      

### For Scheduled Jobs

For scheduled jobs, just add the `--result` option when scheduling a job. Every time the job runs, the results are written into `output_table`.

    :::term
    $ td result:create mydb td://@/testdb
    $ td sched:create hourly_count_example "0 * * * *" \
      -d testdb "select count(*) from www_access" \
      --result mydb:output_table

## Two Ways to Modify Data (Append/Replace)

You can add or delete data in two ways.

    :::term
    td://@/testdb/output_table              # append
    td://@/testdb/output_table?mode=append  # append
    td://@/testdb/output_table?mode=replace # replace

### APPEND

This is the default mode. The query results are appended to the table. If the table does not exist yet, a new table will be created. This operation is not idempotent.

### REPLACE

If the table already exists, the rows of the existing table are replaced with the query results. If the table does not exist yet, a new table will be created.

We achieve **atomicity** (so that a consumer of the table always has consistent data) by performing the following three steps in a **single transaction**.

1. Create a temporary table.
2. Write to the temporary table.
3. Replace the existing table with the temporary table atomically.
