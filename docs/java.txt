# Streaming Import from Java Apps

This article explains **4 steps** to streamingly import the data from Java applications, through Treasure Agent.

## Prerequisites

  * Basic knowledge of Java.
  * Basic knowledge of Maven2.
  * Basic knowledge of Treasure Data.
  * Java 6 or higher (for local testing).

## Step 1: Installing Treasure Agent

First of all, Treasure Agent (`td-agent`) needs to be installed on your application servers. Treasure Agent is an agent program sits within your application servers, focusing on uploading application logs to the cloud.

<center><img src="/images/td-agent-app.png" width="100%" /></center><br /><br />

The [td-logger-java](http://github.com/treasure-data/td-logger-java) library enables Java applications to post records to their local Treasuge Agent. Treasure Agent in turn receives the records, buffers them, and uploads the data to the cloud every 5 minutes. Because the daemon runs on a local node, the logging latency is negligible.

To set up Treasure Agent (`td-agent`), please refer to the following articles:

<table>
  <tr>
    <th>If you have...</th>
    <th>Please refer to...</th>
  </tr>
  <tr>
    <td>RHEL / CentOS System</td>
    <td><a href="http://docs.fluentd.org/articles/install-by-rpm">Installing td-agent for Redhat and CentOS</a></td>
  </tr>
  <tr>
    <td>Ubuntu System</td>
    <td><a href="http://docs.fluentd.org/articles/install-by-deb">Installing td-agent for Debian and Ubuntu</a></td>
  </tr>
  <tr>
    <td>MacOS X</td>
    <td><a href="http://docs.fluentd.org/articles/install-by-homebrew">Installing td-agent on MacOS X</a></td>
  </tr>
  <tr>
    <td>Joyent SmartOS</td>
    <td><a href="http://help.treasuredata.com/customer/portal/articles/1246933-installing-td-agent-on-joyent-smartos">Installing fluentd + td plugin on Joyent SmartOS</a></td>
  </tr>
  <tr>
    <td>AWS Elastic Beanstalk</td>
    <td><a href="https://github.com/treasure-data/elastic-beanstalk-td-agent">Installing td-agent on AWS Elastic Beanstalk</a></td>
  </tr>
</table>

## Step 2: Modifying /etc/td-agent/td-agent.conf

Next, please specify your authentication key by setting the `apikey` option in your `/etc/td-agent/td-agent.conf` file. 

NOTE: <i>YOUR_API_KEY</i> should be your actual apikey string. You can retrieve your api key from <a href="https://console.treasuredata.com/users/current" target="_blank">HERE</a>. 

    :::text
    # Input from Logger Libraries
    <source>
      type forward
      port 24224
    </source>

    # Treasure Data Output
    <match td.*.*>
      type tdlog
      apikey YOUR_API_KEY
      auto_create_table
      buffer_type file
      buffer_path /var/log/td-agent/buffer/td
      use_ssl true
    </match>

Please restart your agent once these lines are in place.

    :::term
    $ sudo /etc/init.d/td-agent restart

td-agent will now accept data via port 24224, buffer it (*var/log/td-agent/buffer/td*), and automatically upload it into the cloud.

## Step 3: Using td-logger-java

First, please add the following lines to pom.xml. The logger library's version information can be found in [CHANGES.txt](https://github.com/treasure-data/td-logger-java/blob/master/CHANGES.txt).

NOTE: If you need a all-in-one jar file, we provide one at <a href="http://maven.treasure-data.com/">http://maven.treasure-data.com/</a>.

    :::xml
    <dependencies>
      ...
      <dependency>
        <groupId>com.treasure_data</groupId>
        <artifactId>td-logger</artifactId>
        <version>${logger.version}</version>
      </dependency>
      ...
    </dependencies>
    
    <repositories>
      <repository>
        <id>treasure-data.com</id>
        <name>Treasure Data's Maven2 Repository</name>
        <url>http://maven.treasure-data.com/</url>
      </repository>
      <repository>
        <id>fluentd.org</id>
        <name>Fluentd's Maven2 Repository</name>
        <url>http://fluentd.org/maven2</url>
      </repository>
    </repositories>

Next, please configure your *treasure-data.properties* file using the commands shown below:

    :::text
    td.logger.agentmode=true
    td.logger.agent.host=localhost
    td.logger.agent.port=24224
    td.logger.agent.tag=td

Finally, please insert the following lines into your application. Further information regarding the API can be found [here](https://github.com/treasure-data/td-logger-java).

    :::java
    import com.treasure_data.logger.TreasureDataLogger;
    public class Main {
      private static TreasureDataLogger LOG;
      static {
        try {
          Properties props = System.getProperties();
          props.load(Main.class.getClassLoader().getResourceAsStream("treasure-data.properties"));
          LOG = TreasureDataLogger.getLogger("test_db");
        } catch (IOException e) {
          // do something
        }
      }
      public void doApp() {
        Map<String, Object> data = new HashMap<String, Object>();
        data.put("from", "userA");
        data.put("to", "userB");
        LOG.log("follow", data);
      }
    }

## Step 4: Confirming Data Import

Sending a SIGUSR1 signal will flush td-agent's buffer; upload will start immediately.

    :::term
    # Post a record
    $ java -jar test.jar
    
    # Flush the buffer
    $ kill -USR1 `cat /var/run/td-agent/td-agent.pid`

#### From Web Console

To confirm that your data has been uploaded successfully, check your dataset from the web browser [HERE](https://console.treasuredata.com/databases).

#### From CLI
Or, please issue the *td tables* command if you have a [CLI client](command-line).

    :::term
    $ td tables
    +------------+------------+------+-----------+
    | Database   | Table      | Type | Count     |
    +------------+------------+------+-----------+
    | test_db    | follow     | log  | 1         |
    +------------+------------+------+-----------+

## Production Deployments

### High-Availablability Configurations of td-agent

For high-traffic websites (more than 5 application nodes), we recommend using a high availability configuration of td-agent. This will improve data transfer reliability and query performance.

* [High-Availability Configurations of td-agent](td-agent-high-availability)

### Monitoring td-agent

Monitoring td-agent itself is also important. Please refer to this document for general monitoring methods for td-agent.

* [Monitoring td-agent](td-agent-monitoring)

NOTE: td-agent is fully open-sourced under the <a href="http://fluentd.org/">fluentd project</a>.

## Next Steps

We offer a schema mechanism that is more flexible than that of traditional RDBMSs. For queries, we leverage the Hive Query Language.

* [Schema Management](schema)
* [Hive Query Language](hive)
* [Programatic Access with REST API and its Bindings](/categories/api)

For more specific assistance, please visit our support center:

* [Treasure Data Support Center](http://help.treasuredata.com/)

