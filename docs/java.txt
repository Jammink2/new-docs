# Streaming Import from Java Apps

This article explains **4 steps** to streamingly import the data from Java applications, through Treasure Agent.

## Prerequisites

  * Basic knowledge of Java.
  * Basic knowledge of Maven2.
  * Basic knowledge of Treasure Data.
  * Java 6 or higher (for local testing).

## What is Treasure Agent?

First of all, Treasure Agent (`td-agent`) needs to be installed on your application servers. Treasure Agent is an agent program sits within your application servers, focusing on uploading application logs to the cloud.

<center><img src="/images/td-agent-app.png" width="100%" /></center><br /><br />

The [td-logger-java](http://github.com/treasure-data/td-logger-java) library enables Java applications to post records to their local Treasuge Agent. Treasure Agent in turn receives the records, buffers them, and uploads the data to the cloud every 5 minutes. Because the daemon runs on a local node, the logging latency is negligible.

## How to install Treasure Agent?

This video demonstrates how to install Treasure Agent in 3 minutes.

<iframe width="780" height="525" src="//www.youtube-nocookie.com/embed/aepa66ykguc?rel=0&theme=light&modestbranding=1&showinfo=0" frameborder="1" allowfullscreen></iframe>

### Step 1: Installing Treasure Agent

To install Treasure Agent (`td-agent`), please execute one of the command below based on your environment. The agent program will be installed automatically by using the package management software for each platform like rpm/deb/dmg.

#### MacOS X 10.9+

    :::terminal
    $ open 'http://packages.treasuredata.com/2/macosx/td-agent-2.1.4-0.dmg'

#### RHEL/CentOS 5,6,7

    :::terminal
    $ curl -L http://toolbelt.treasuredata.com/sh/install-redhat-td-agent2.sh | sh

#### Ubuntu & Debian

    :::terminal
    # 14.04 Trusty (64bit only)
    $ curl -L http://toolbelt.treasuredata.com/sh/install-ubuntu-trusty-td-agent2.sh | sh
    # 12.04 Precise
    $ curl -L http://toolbelt.treasuredata.com/sh/install-ubuntu-precise-td-agent2.sh | sh
    # 10.04 Lucid
    $ curl -L http://toolbelt.treasuredata.com/sh/install-ubuntu-lucid-td-agent2.sh | sh

    # Debian Squeeze (64bit only)
    $ curl -L http://toolbelt.treasuredata.com/sh/install-debian-squeeze-td-agent2.sh | sh
    # Debian Wheezy (64bit only)
    $ curl -L http://toolbelt.treasuredata.com/sh/install-debian-wheezy-td-agent2.sh | sh

#### Amazon Linux

    :::terminal
    $ curl -L http://toolbelt.treasuredata.com/sh/install-redhat-td-agent2.sh | sh

#### Opscode Chef (<a target="_blank" href="https://github.com/treasure-data/chef-td-agent">repository</a>)

    :::terminal
    $ echo 'cookbook "td-agent"' >> Berksfile
    $ berks install

<a href="https://github.com/treasure-data/elastic-beanstalk-td-agent">AWS Elastic Beanstalk</a> is also supported. Amazon Linux & Windows are currently NOT supported.

### Step 2: Modifying /etc/td-agent/td-agent.conf

Next, please specify your API key by setting the `apikey` option in your `/etc/td-agent/td-agent.conf` file.

    :::text
    # Input from Logger Libraries
    <source>
      type forward
      port 24224
    </source>

    # Treasure Data Output
    <match td.*.*>
      type tdlog
      endpoint <%= @env[:api_endpoint] %>
      apikey YOUR_API_KEY
      auto_create_table
      buffer_type file
      buffer_path /var/log/td-agent/buffer/td
      use_ssl true
    </match>

NOTE: <i>YOUR_API_KEY</i> should be your actual apikey string. You can retrieve your api key from <a href="<%= @env[:url_profile] %>" target="_blank">HERE</a>. Using a [write-only API key](access-control#rest-apis-access) is recommended.

Please restart your agent once these lines are in place.

    :::terminal
    # Linux
    $ sudo /etc/init.d/td-agent restart

    # MacOS X
    $ sudo launchctl unload /Library/LaunchDaemons/td-agent.plist
    $ sudo launchctl load /Library/LaunchDaemons/td-agent.plist

td-agent will now accept data via port 24224, buffer it (*var/log/td-agent/buffer/td*), and automatically upload it into the cloud.

### Step 3: Using td-logger-java

NOTE: If you need an all-in-one jar file, we provide one at <a href="http://central.maven.org/maven2/com/treasuredata/">http://central.maven.org/maven2/com/treasuredata/</a>. Be sure to download the latest version of the td-logger-{version_number}-jar-with-dependencies.jar file.

Conversely, if you are using Maven, please add the following lines to pom.xml in your Maven project:


    :::xml
    <dependencies>
      ...
      <dependency>
        <groupId>com.treasuredata</groupId>
        <artifactId>td-logger</artifactId>
        <version>${logger.version}</version>
      </dependency>
      ...
    </dependencies>

Next, please configure your *treasure-data.properties* file using the commands shown below:

    :::text
    td.logger.agentmode=true
    td.logger.agent.host=localhost
    td.logger.agent.port=24224
    td.logger.agent.tag=td

You must ensure that the *treasure-data.properties* file is referenced by your java classpath.

Finally, please insert the following lines into your application. Further information regarding the API can be found [here](https://github.com/treasure-data/td-logger-java).

    :::java
    import com.treasure_data.logger.TreasureDataLogger;
    public class Main {
      private static TreasureDataLogger LOG;
      static {
        try {
          Properties props = System.getProperties();
          props.load(Main.class.getClassLoader().getResourceAsStream("treasure-data.properties"));
          LOG = TreasureDataLogger.getLogger("test_db");
        } catch (IOException e) {
          // do something
        }
      }
      public void doApp() {
        Map<String, Object> data = new HashMap<String, Object>();
        data.put("from", "userA");
        data.put("to", "userB");
        LOG.log("follow", data);
      }
    }

### Step 4: Confirming Data Import

First, please execute the program above.

    :::terminal
    # Post a record
    $ java -jar test.jar

Sending a SIGUSR1 signal will flush td-agent's buffer; upload will start immediately.

    :::terminal
    # Linux
    $ kill -USR1 `cat /var/run/td-agent/td-agent.pid`

    # MacOS X
    $ sudo kill -USR1 `sudo launchctl list | grep td-agent | cut -f 1`

#### From Web Console

To confirm that your data has been uploaded successfully, check your dataset from the web browser [HERE](<%= @env[:url_databases] %>).

#### From CLI
Or, please issue the *td tables* command if you have a [CLI client](command-line).

    :::terminal
    $ td tables
    +------------+------------+------+-----------+
    | Database   | Table      | Type | Count     |
    +------------+------------+------+-----------+
    | test_db    | follow     | log  | 1         |
    +------------+------------+------+-----------+

## Production Deployments

### High-Availablability Configurations of td-agent

For high-traffic websites (more than 5 application nodes), we recommend using a high availability configuration of td-agent. This will improve data transfer reliability and query performance.

* [High-Availability Configurations of td-agent](td-agent-high-availability)

### Monitoring td-agent

Monitoring td-agent itself is also important. Please refer to this document for general monitoring methods for td-agent.

* [Monitoring td-agent](td-agent-monitoring)

NOTE: td-agent is fully open-sourced under the <a href="http://fluentd.org/">fluentd project</a>.

## Next Steps

We offer a schema mechanism that is more flexible than that of traditional RDBMSs. For queries, we leverage the Hive Query Language.

* [Schema Management](schema)
* [Hive Query Language](hive)
* [Programatic Access with REST API and its Bindings](/categories/api)
