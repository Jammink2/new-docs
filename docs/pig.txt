Pig Latin Language
==================

[Pig Latin](http://pig.apache.org/) is a relational data-flow language built on top of the Hadoop platform. This article explains how to use Pig as a query interface for Treasure Data.

## Prerequisites

  * Basic knowledge of Treasure Data, including the [toolbelt](http://toolbelt.treasuredata.com).

## About Apache Pig

[Pig](http://hive.apache.org/) is a top level project of the Apache foundation. Treasure Data supports Pig as a data processing method (current version: 0.10.0).

## Documentation and References

* [The official Pig documentation](http://pig.apache.org/docs/r0.10.0/) provides an overview of Pig.
* The [Pig Latin Basics](http://pig.apache.org/docs/r0.10.0/basic.html) document covers the basics of Pig syntax and queries.
* The [Comparing Pig and Hive](http://developer.yahoo.com/blogs/hadoop/posts/2010/01/comparing_pig_latin_and_sql_fo/) blog article gives a high level comparison of Hive and Pig.
* The [DataFu](https://github.com/linkedin/datafu) package contains useful UDFs for Pig.

## CLI Usage

You can issue queries using the `td query` command.

    :::term
    usage:
      $ td query -t pig <pig scripts>

    example:
      $ td query -d example_db -t pig "OUT = FOREACH (GROUP table1 ALL) GENERATE COUNT(table1);"

    options:
      -t, --type TYPE specify the type of query (requires specifying 'pig' in order to issue queries in Pig Latin)
      -q, --query PATH read query from a file instead of inline
      -d, --database DB_NAME use this database (required)
      -w, --wait wait for the job to finish
      -o, --output PATH write results to this file
      -f, --format FORMAT write results to file in this format (tsv, csv, json or msgpack)
      -r, --result RESULT_URL write results to this URL (see also result:create subcommand)
      -u, --user NAME set user name for the result URL
      -p, --password ask for the password for the result URL
      -P, --priority PRIORITY set priority

A pig script often consists of multiple lines, which makes loading scripts from files useful. You can load pig scripts from files using the `-q` parameter as shown below.

    :::term
    $ td query -d example_db -t pig -q pig-script.txt

## Pig on Treasure Data
Because Treasure Data operates on a multi-tenant model with data stored in columnar format, it is unlike typical Hadoop environments. Below is a summary of characteristics unique to the Treasure Data platform:

  * We prepopulate all other scripts with `LOAD` statements that define all tables as variables. For example, if `www_access` is a table in the selected database, then the variable `www_access` is automatically created. You may create further statements referring to this variable, for example `A = GROUP a BY v#'code'`. Since all table load statements are predefined, you do not need any `LOAD`s in your script.
  * `STORE` statements are also not needed. The last declared variable in your script will automatically be saved as the result of your query.
  * For security reasons, the following keywords are not supported: `set`, `cat`, `cd`, `kill`, `ls`, `pwd`, `move`, `copy`, `mkdir`, `remove`, `fs`, `sh`.
  * Pig requires that field and relation names start with a alphabetic character. If your table has fields that start with a numeric character or a symbol, it cannot be processed.


## Example Queries

Here are some basic examples. We will assume that the underlying table consists of at least three fields: `host`, `path`, and `time` (this is true for the table created in the [Quickstart guide](quickstart)). The schema on this table is assumed to be unset.

#### Number of records

    :::term
    A = FOREACH www_access GENERATE $0;
    OUT = FOREACH (GROUP A ALL) GENERATE COUNT($1);

Specifying columns explicitly improves the performance of the query significantly.

#### Number of records per unique host

    :::term
    A = FOREACH www_access GENERATE host;
    OUT = FOREACH (GROUP A BY host) GENERATE group AS host, COUNT($1) AS cnt;

If you don't have a schema on the table, you need to write the query as follows:

    :::term
    OUT = FOREACH (GROUP www_access BY v#'host') GENERATE group AS host, COUNT($1) AS cnt;

But this query isn't optimized without schema. Please see [Set Custom Schema](http://docs.treasuredata.com/articles/performance-tuning#set-custom-schema).

#### Unique hosts sorted by number of accesses

    :::term
    A = FOREACH www_access GENERATE host;
    B = FOREACH (GROUP A BY host) GENERATE group AS host, COUNT($1) AS cnt;
    OUT = ORDER B BY cnt DESC;

## Parameter Substitution
Parameters are values that are passed in at runtime as substitutes for some variables. We provide some default variables for the scheduled query feature:

`$TD_SCHEDULED_TIME` represents the time when the current query is scheduled to run. Example usage:

    :::term
    FILTER www_access BY time > $TD_SCHEDULED_TIME;

## UDFs

The [DataFu](https://github.com/linkedin/datafu) package of Pig UDFs are included in our platform. Please refer to its documentation for usage instructions. (current version: 0.0.4)

The [Piggybank](http://svn.apache.org/viewvc/pig/trunk/contrib/piggybank/java/src/main/java/org/apache/pig/piggybank/) set of UDFs are also included.

Examples:
To use a UDF from either of the above libraries, you can refer to it by its fully declared name.
    :::term
    FILTER www_access BY org.apache.pig.piggybank.evaluation.IsInt(v#'code');

Alternatively, a `define` statement can be used to create an alias for the UDF, which the script can reference instead.
    :::term
    define IsInt org.apache.pig.piggybank.evaluation.IsInt();
    FILTER www_access BY IsInt(v#'code');

## Known Issues

#### SUM of Integer Fields

Currently SUM aggregation of values of integer type is not properly working. The related Apache.org Pig Issue is
[PIG-2718](https://issues.apache.org/jira/browse/PIG-2718). In order to work around this limitation users are invited
to cast their integer fields to float and convert the result of the SUM to integer:

    # from
    B = FOREACH (GROUP A BY host) GENERATE group AS host, SUM($1) AS sum;

    # to
    B = FOREACH (GROUP A BY host) GENERATE group AS host, (int)SUM((float)$1) AS sum;




