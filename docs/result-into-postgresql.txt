# Writing the Query Results into your PostgreSQL Tables

This article explains how to write job results to your existing PostgreSQL instance.

## Prerequisites

  * Basic knowledge of Treasure Data, including [the toolbelt](http://toolbelt.treasure-data.com).
  * **A PostgreSQL instance**. 
  * Treasure Data must have SELECT, INSERT, DELETE, CREATE, DROP and ALTER privileges.

## Architecture

A front-end application first posts data to Treasure Data. Treasure Data runs MapReduce jobs on the data, then writes the job results to your PostgreSQL tables.

<center><img src="/images/result_rdbms.png" width="90%" /></center><br /><br />

Shown above is a fairly common architecture. Here are a few examples.

#### Example 1: Ranking: What are the "Top N of X?"

Every social/mobile application calculates the "top N of X" (ex: top 5 movies watched today). Treasure Data already handles the raw data warehousing; the "write-to-PostgreSQL" feature enables Treasure Data to find the "top N" data as well.

#### Example 2: Dashboard Application

If you're a data scientist, you need to keep track of a range of metrics every hour/day/month and make them accessible via visualizations. Using this "write-to-PostgreSQL" feature, you can streamline the process and focus on your queries and your visualizations of the query results.

## Basic Usage

### For On-demand Jobs

For on-demand jobs, just add the `--result` option to the `td query` command. After the job is finished, the results are written into your table.

    :::sql
    $ td query --result 'postgresql://user:password@host/database/table' \
      -w -d testdb \
      "SELECT v['code'], COUNT(1) FROM www_access GROUP BY v['code']"      

### For Scheduled Jobs

For scheduled jobs, just add the `--result` option when scheduling a job. Every time the job runs, the results are written into `mytbl`.

    :::term
    $ td result:create mydb postgresql://user:password@host/database
    $ td sched:create hourly_count_example "0 * * * *" -d testdb "select count(*) from www_access" --result mydb:mytbl

## Three Modes to Modify Data

You can add or delete data in three ways.

    :::term
    postgresql://user:password@host/database/table               # append
    postgresql://user:password@host/database/table?mode=append   # append
    postgresql://user:password@host/database/table?mode=replace  # replace
    postgresql://user:password@host/database/table?mode=truncate # truncate

All three modes are **atomic**.

### APPEND (default)

This is the default mode. The query results are appended to a table. If the table does not exist yet, a new table will be created.

### REPLACE

If the table already exists, the rows of the existing table are replaced with the query results. If the table does not exist yet, a new table will be created.

We achieve **atomicity** (so that a consumer of the table always has consistent data) by performing the following three steps in a **single transaction**.

1. Create a temporary table.
2. Write to the temporary table.
3. Replace the existing table with the temporary table using ALTER TABLE RENAME.

### TRUNCATE

The system first truncates the existing table, then inserts the query results. If the table does not exist yet, a new table will be created.

**Unlike REPLACE, TRUNCATE retains the indexes of your table.**


## Two Methods of Writing Data (Insert/Copy)
There are a couple of methods for writing the data. By default, the "insert" method is used. This is also the recommended method for most situations. You can combine a method with any mode (see example below).

    :::term
    postgresql://user:password@host/database/table                 # insert
    postgresql://user:password@host/database/table?method=insert   # insert
    postgresql://user:password@host/database/table?method=copy     # copy
    postgresql://user:password@host/database/table?mode=append&method=copy  # can combine method with any mode

### INSERT (default)
Data is written to Postgres using INSERT statements. This is the most reliable and compatible method and is recommended for most situations

### COPY
In this case, data is first stored in a temporary file on the server, and then written to Postgres using [COPY](http://www.postgresql.org/docs/8.1/static/sql-copy.html). This method is faster than INSERT, so it is good in situations where your result data is large.