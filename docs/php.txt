# Data Import from PHP Applications

In order to import data from PHP applications to Treasure Data, we provide a logger library called [**fluent-logger-php**](http://github.com/fluent/fluent-logger-php). This article describes how to use the library.

## Prerequisites

  * Basic knowledge of PHP
  * Basic knowledge of Treasure Data, including the latest installed version of [the toolbelt](http://toolbelt.treasure-data.com).
  * PHP 5.3 or higher to test locally.

NOTE: This doesn't work on Heroku environment. See <a href="/articles/heroku-notes">Heroku Notes</a> page.

## Install the td-agent

You need to set up 'td-agent' on your application servers. `td-agent` is a daemon to continuously upload logs as a stream. `td-agent` is developed and maintained by Treasure Data, Inc.

<center><img src="/images/td-agent-app.png" width="90%" /></center><br /><br />

The [fluent-logger-php](http://github.com/fluent/fluent-logger-php) library allows PHP applications to post logs to a local td-agent, which in turn uploads the data to the cloud every 5 minutes. Because the daemon runs on a local node, latency is negligible.

Please refer to the following articles to set up `td-agent`. For Linux systems, we provide deb/rpm packages for quick installation.

<table>
  <tr>
    <th>If you have...</th>
    <th>Please look at...</th>
  </tr>
  <tr>
    <td>Debian / Ubuntu System</td>
    <td><a href="http://treasure-data.tenderapp.com/kb/installing-td-agent-daemon/installing-td-agent-for-debian-and-ubuntu">Installing td-agent for Debian and Ubuntu</a></td>
  </tr>
  <tr>
    <td>Redhat / CentOS System</td>
    <td><a href="http://treasure-data.tenderapp.com/kb/installing-td-agent-daemon/installing-td-agent-for-redhat-and-centos">Installing td-agent for Redhat and CentOS</a></td>
  </tr>
</table>

NOTE: Please note that td-agent is fully open-sourced as part of the <a href="http://github.com/fluent/">fluentd project</a>. td-agent is a package which contains fluentd and extension plugins for Treasure Data.

## Modify /etc/td-agent/td-agent.conf

We’ll also need to set the `apikey` option, which is a secret key to authenticate our account. Once you successfully created your account (with the `td account` command), you can look up your API key by typing `td apikey:show` in the command line:

    :::term
    $ td apikey:show
    3b7118fd3ad7e35bbd3c0e4f607ec7263aa93c30

Let’s set the `apikey` option in our td-agent.conf file. Replace *YOUR_API_KEY* with your actual API key.

    :::term
    # Unix Domain Socket Input
    <source>
      type unix
      path /var/run/td-agent/td-agent.sock
    </source>
    
    # Treasure Data Output
    <match td.*.*>
      type tdlog
      apikey YOUR_API_KEY
      auto_create_table
      buffer_type file
      buffer_path /var/log/td-agent/buffer/td
    </match>

Once these lines are in place, we’ll restart our agent.

    :::term
    $ sudo /etc/init.d/td-agent restart

We have now enabled td-agent to read and upload log data into the cloud via port 24224.

## Using fluent-logger-php

[**fluent-logger-php**](http://github.com/fluent/fluent-logger-php) is a PHP library to post the records to td-agent from a PHP application. To use, copy the library itself into your project directory.

    :::term
    $ git clone https://github.com/fluent/fluent-logger-php.git
    $ cp -r src/Fluent <path/to/your_project>

Then, initialize and post the records as follows.

    :::php
    <?php
    require_once __DIR__.'/src/Fluent/Autoloader.php';
    use Fluent\Logger\FluentLogger;
    Fluent\Autoloader::register();
    $logger = new FluentLogger("unix:///var/run/td-agent/td-agent.sock");
    $logger->post("td.test_db.test_table", array("hello"=>"world"));
    $logger->post("td.test_db.follow", array("from"=>"userA", "to"=>"userB"));

## Confirm the Import

The posted records are first transferred to the local td-agent. td-agent buffers the records locally for awhile and uploads them every 5 minutes.

NOTE: The first argument of `post()`, "tag", determines the database name and table name. If you specify `td.test_db.test_table`, the data will be imported into the *test_table* table within the *test_db* database. Those are automatically created at the upload time.

Sending SIGUSR1 signal to the agent flushes its buffer and starts uploading immediately (as opposed to waiting for upto five minutes).

    :::term
    $ php test.php
    $ kill -USR1 `cat /var/run/td-agent/td-agent.pid`

To confirm the data upload, please use `td tables`.

    $ td tables
    +------------+------------+------+-----------+
    | Database   | Table      | Type | Count     |
    +------------+------------+------+-----------+
    | test_db    | test_table | log  | 1         |
    | test_db    | follow     | log  | 1         |
    +------------+------------+------+-----------+

## Tips on Deploying in Production

### Use Apache and mod_php

Other deployment options have not been fully explored.

### Use Apache prefork MPM and Set MaxRequestsPerChild

Please ensure you're using Apache prefork MPM instead of other MPM like worker MPM. You can confirm the current settings with the *apachectl -V* command.

    :::term
    $ apachectl -V | grep MPM:
    Server MPM:     Prefork

Also, it's recommended to periodically restart your PHP processes, by setting *MaxRequestsPerChild* in your Apache conf (*NOT* zero).

    :::term
    <IfModule mpm_prefork_module>
      StartServers          32
      MinSpareServers       32
      MaxSpareServers       32
      MaxClients            32
      MaxRequestsPerChild 4096
    </IfModule>

### High-Availablability Configurations of td-agent

For high-traffic websites (more than 5 application nodes), we recommend using the high availability configuration for td-agent. This improves data transfer reliability and query performance.

* [High-Availability Configurations of td-agent](td-agent-high-availability)

## Next Step

Next, you may be curious about our schema mechanism, which is completely different from traditional RDBMSs. Also, please look at HiveQL section to know more about queries.

* [Schema Management](/articles/schema)
* [Hive Query Language](http://localhost:9393/articles/hive)

For more specific assistance, please visit our support resources:

* [Treasure Data Discussion Forum](http://help.treasure-data.com/)
