# Data Import from Rails Applications

In order to import data from Ruby applications to Treasure Data, we provide a library called '[td-logger-ruby](http://github.com/treasure-data/td-logger-ruby)'. This article describes how to use that library.

## Prerequisites

  * Basic knowledge of Ruby, Rails, Gems, and Bundler
  * Basic knowledge of Treasure Data, including the latest installed version of the toolbelt.
  * An installed version of Ruby 1.8 or higher to test locally

NOTE: Heroku users, please look at <a href="/articles/heroku-raisl">Rails Apps on Heroku</a>.

## Install the td-agent

At first, you need to setup 'td-agent' on your application servers. ‘td-agent’ is a daemon program dedicated to the continuous upload of any kind of streaming log data. td-agent is developed and maintained by Treasure Data, Inc.

Through [td-logger-ruby](http://github.com/treasure-data/td-logger-ruby) library, Rails applications can post their application logs to local td-agent, and it uploads to the cloud every 5 minutes.

<center><img src="/images/rails_to_td_via_td-agent.png" width="80%"></center>

Please refer to the following articles in setting up td-agent. For Linux systems, we're providing deb/rpm packages for the easy installation.

<table>
  <tr>
    <th>If you have...</th>
    <th>Please look at...</th>
  </tr>
  <tr>
    <td>Debian / Ubuntu System</td>
    <td><a href="http://treasure-data.tenderapp.com/kb/installing-td-agent-daemon/installing-td-agent-for-debian-and-ubuntu">Installing td-agent for Debian and Ubuntu</a></td>
  </tr>
  <tr>
    <td>Redhat / CentOS System</td>
    <td><a href="http://treasure-data.tenderapp.com/kb/installing-td-agent-daemon/installing-td-agent-for-redhat-and-centos">Installing td-agent for Redhat and CentOS</a></td>
  </tr>
</table>

NOTE: Please note that td-agent is fully open-sourced as the <a href="http://github.com/fluent/">fluentd project</a>. td-agent is a package which contains fluentd and extension plugins for Treasure Data.

## Modify /etc/td-agent/td-agent.conf

We’ll also need to set the `apikey` option, which is a secret key to authenticate our account. Our api key can be shown by `td apikey:show`, as long as we have successfully authenticated our account using the ‘td account’ command.:

    :::term
    $ td apikey:show
    3b7118fd3ad7e35bbd3c0e4f607ec7263aa93c30

Let’s set the `apikey` option in our td-agent.conf file. Please replace *YOUR_API_KEY* to your actual apikey string.

    :::term
    # Treasure Data Input and Output
    <source>
      type forward
      port 24224
    </source>
    <match td.*.*>
      type tdlog
      apikey YOUR_API_KEY
      auto_create_table
      buffer_type file
      buffer_path /var/log/td-agent/buffer/td
    </match>

Once these lines are in place, we’ll restart our agent.

    :::term
    $ sudo /etc/init.d/td-agent restart

By this configuration, td-agent accepts the data import via 24224. When it receives the records from the applications, the records are first buffered into the local disk (*/var/log/td-agent/buffer/td*). And every 5 minutes, those are automatically uploaded into the cloud.

## Use td-logger-ruby

[td-logger-ruby](http://github.com/treasure-data/td-logger-ruby) is a Ruby library to record events to td-agent from a Ruby application. First, add the ‘td’ (stands for ‘T’reasure ‘D’ata) gem to your Gemfile.

    :::term
    gem 'td', "~> 0.10.6"

Then, please prepare *config/treasure_data.yml* as follows.


    :::term
    production:
      agent: "localhost:24224"
      tag: td.production_database_name
      debug_mode: false
    
    development:
      agent: "localhost:24224"
      tag: td.development_database_name
      debug_mode: false
    
    test:
      

Finally, please insert the logging codes into your applications.

    :::ruby
    # Example1: login event
    TD.event.post('login', {:uid=>123})
    
    # Example2: follow event
    TD.event.post('follow', {:uid=>123, :from=>'TD', :to=>'Heroku'})
    
    # Example3: pay event
    TD.event.post('pay',
                  {:uid=>123, :item_name=>'Stone of Jordan',
                   :category=>'ring', :price=>100, :count=>1})

## Confirm the Import

The posted records are first transferred to the local td-agent. td-agent buffers the records within local disk for a while, and uploads them every 5 minutes.

Rather than waiting 5 minutes, sending SIGUSR1 signal to the agent flushes its buffe,r and it starts uploading immediately.

    :::term
    $ ruby test.rb
    $ kill -USR1 `cat /var/run/td-agent/td-agent.pid`

To confirm the data upload, please use `td tables`.

    :::term
    $ td tables
    +------------+------------+------+-----------+
    | Database   | Table      | Type | Count     |
    +------------+------------+------+-----------+
    | test_db    | login      | log  | 1         |
    | test_db    | follow     | log  | 1         |
    | test_db    | pay        | log  | 1         |
    +------------+------------+------+-----------+

## Production Deployments

### Use Rack-based Server Deployments

Use *unicorn*, *thin*, *mongrel*, etc. Other deployment options are not well tested.

### High-Availablability Configurations of td-agent

For highly loaded sites (more than 5 application nodes), we recommend using high availability configuration for td-agent. This improves the data transfer reliability, and also the query performance.

* [High-Availability Configurations of td-agent](td-agent-high-availability)
