# Streaming Import from Rails Apps

This article explains **4 steps** to streamingly import the data from Ruby on Rails applications, through Treasure Agent.

## Prerequisites

  * Basic knowledge of Ruby, Rails, Gems, and Bundler.
  * Basic knowledge of Treasure Data.
  * Ruby 1.9 or higher (for local testing).

## Step 1: Installing Treasure Agent

First of all, Treasure Agent (`td-agent`) needs to be installed on your application servers. Treasure Agent is an agent program sits within your application servers, focusing on uploading application logs to the cloud.

<center><img src="/images/td-agent-app.png" width="100%"></center><br/>

The [td-logger-ruby](http://github.com/treasure-data/td-logger-ruby) library enables Rails applications to post records to their local Treasure Agent. Treasure Agent in turn receives the records, buffers them, and uploads the data to the cloud every 5 minutes. Because the daemon runs on a local node, the logging latency is negligible.

To set up Treasure Agent (`td-agent`), please refer to the following articles:

<table>
  <tr>
    <th>If you have...</th>
    <th>Please refer to...</th>
  </tr>
  <tr>
    <td>MacOS X</td>
    <td><a href="http://docs.fluentd.org/articles/install-by-dmg">Installing td-agent on MacOS X</a></td>
  </tr>
  <tr>
    <td>Ubuntu System</td>
    <td><a href="http://docs.fluentd.org/articles/install-by-deb">Installing td-agent for Debian and Ubuntu</a></td>
  </tr>
  <tr>
    <td>RHEL / CentOS System</td>
    <td><a href="http://docs.fluentd.org/articles/install-by-rpm">Installing td-agent for Redhat and CentOS</a></td>
  </tr>
  <tr>
    <td>Joyent SmartOS</td>
    <td><a href="http://help.treasuredata.com/customer/portal/articles/1246933-installing-td-agent-on-joyent-smartos">Installing fluentd + td plugin on Joyent SmartOS</a></td>
  </tr>
  <tr>
    <td>AWS Elastic Beanstalk</td>
    <td><a href="https://github.com/treasure-data/elastic-beanstalk-td-agent">Installing td-agent on AWS Elastic Beanstalk</a></td>
  </tr>
</table>

## Step 2: Modifying /etc/td-agent/td-agent.conf

Next, please specify your API key by setting the `apikey` option in your `/etc/td-agent/td-agent.conf` file.

    :::text
    # Input from Logging Libraries
    <source>
      type forward
      port 24224
    </source>

    # Treasure Data Output
    <match td.*.*>
      type tdlog
      apikey YOUR_API_KEY
      auto_create_table
      buffer_type file
      buffer_path /var/log/td-agent/buffer/td
      use_ssl true
    </match>

NOTE: <i>YOUR_API_KEY</i> should be your actual apikey string. You can retrieve your api key from <a href="https://console.treasuredata.com/users/current" target="_blank">HERE</a>. Using the write-only key is recommended.

Please restart your agent once these lines are in place.

    :::term
    # Linux
    $ sudo /etc/init.d/td-agent restart
    
    # MacOS X
    $ sudo launchctl unload /Library/LaunchDaemons/td-agent.plist
    $ sudo launchctl load /Library/LaunchDaemons/td-agent.plist

td-agent will now accept data via port 24224, buffer it (*var/log/td-agent/buffer/td*), and automatically upload it into the cloud.

## Step 3: Using td-logger-ruby

First, add the ‘td’ gem to your Gemfile.

    :::ruby
    gem 'td', "~> 0.10.6"

Next, modify the *config/treasure_data.yml* file as follows.

    :::yaml
    production:
      agent: "localhost:24224"
      tag: td.production_database_name
      debug_mode: false
    
    development:
      agent: "localhost:24224"
      tag: td.development_database_name
      debug_mode: false
    
    test:
  
Finally, insert the appropriate logging code into your application.

    :::ruby
    # Example1: login event
    TD.event.post('login', {:uid=>123})
    
    # Example2: follow event
    TD.event.post('follow', {:uid=>123, :from=>'TD', :to=>'Heroku'})
    
    # Example3: pay event
    TD.event.post('pay',
                  {:uid=>123, :item_name=>'Stone of Jordan',
                   :category=>'ring', :price=>100, :count=>1})

## Step 4: Confirming Data Import

First, please execute the program above.

    :::term
    $ ruby test.rb

Sending a SIGUSR1 signal will flush td-agent's buffer; upload will start immediately.

    :::term
    # Linux
    $ kill -USR1 `cat /var/run/td-agent/td-agent.pid`
    
    # MacOS X
    $ sudo kill -USR1 `sudo launchctl list | grep td-agent | cut -f 1`

#### From Web Console

To confirm that your data has been uploaded successfully, check your dataset from the web browser [HERE](https://console.treasuredata.com/databases).

#### From CLI
Or, please issue the *td tables* command if you have a [CLI client](command-line).

    :::term
    $ td tables
    +------------+------------+------+-----------+
    | Database   | Table      | Type | Count     |
    +------------+------------+------+-----------+
    | test_db    | login      | log  | 1         |
    | test_db    | follow     | log  | 1         |
    | test_db    | pay        | log  | 1         |
    +------------+------------+------+-----------+

## Production Deployments

### Use Rack-based Server Deployments

We recommend that you use *unicorn*, *thin*, *mongrel*, etc. Other setups have not been fully validated.

### High-Availablability Configurations of td-agent

For high-traffic websites (more than 5 application nodes), we recommend using a high availability configuration of td-agent. This will improve data transfer reliability and query performance.

* [High-Availability Configurations of td-agent](td-agent-high-availability)

### Monitoring td-agent

Monitoring td-agent itself is also important. Please refer to this document for general monitoring methods for td-agent.

* [Monitoring td-agent](td-agent-monitoring)

NOTE: td-agent is fully open-sourced under the <a href="http://fluentd.org/">fluentd project</a>.

## Next Steps

We offer a schema mechanism that is more flexible than that of traditional RDBMSs. For queries, we leverage the Hive Query Language.

* [Schema Management](schema)
* [Hive Query Language](hive)
* [Programatic Access with REST API and its Bindings](/categories/api)

For more specific assistance, please visit our support center:

* [Treasure Data Support Center](http://help.treasuredata.com/)
